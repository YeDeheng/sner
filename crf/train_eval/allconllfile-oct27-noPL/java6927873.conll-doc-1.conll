O	0	3	How
O	4	7	can
O	8	9	I
O	10	14	read
O	15	16	a
O	17	21	file
O	22	24	to
O	25	27	an
B-API	28	39	InputStream
O	40	44	then
O	45	50	write
O	51	53	it
O	54	58	into
O	59	61	an
B-API	62	74	OutputStream
O	75	77	in
O	78	83	Scala
O	83	84	?

O	85	88	I'm
O	89	95	trying
O	96	98	to
O	99	102	use
O	103	108	basic
O	109	113	Java
O	114	118	code
O	119	121	in
O	122	127	Scala
O	128	130	to
O	131	135	read
O	136	140	from
O	141	142	a
O	143	147	file
O	148	151	and
O	152	157	write
O	158	160	to
O	161	163	an
B-API	164	176	OutputStream
O	176	177	,
O	178	181	but
O	182	186	when
O	187	188	I
O	189	192	use
O	193	196	the
O	197	202	usual
O	203	208	while
O	209	210	(
O	210	211	!
O	212	213	=
O	214	216	-1
O	216	217	)
O	218	220	in
O	221	226	Scala
O	227	232	gives
O	233	235	me
O	236	237	a
O	238	245	warning
O	246	247	"
O	247	256	comparing
O	257	262	types
O	263	265	of
O	266	270	Unit
O	271	274	and
O	275	278	Int
O	279	283	with
O	283	284	!

O	285	286	=
O	287	291	will
O	292	298	always
O	299	304	yield
O	305	309	true
O	310	311	"
O	311	312	.

O	313	316	The
O	317	321	code
O	322	324	is
O	325	327	as
O	328	335	follows
O	336	337	:
O	338	357	@codeSnippetRemoved

O	358	361	How
O	362	364	am
O	365	366	I
O	367	375	supposed
O	376	378	to
O	379	384	write
O	385	389	from
O	390	392	an
O	393	398	input
O	399	405	stream
O	406	408	to
O	409	411	an
O	412	418	output
O	419	425	stream
O	426	428	in
O	429	434	Scala
O	434	435	?

O	436	439	I'm
O	440	446	mostly
O	447	457	interested
O	458	460	in
O	461	462	a
O	463	473	Scala-like
O	474	482	solution
O	482	483	.

O	484	494	Assignment
O	495	505	statements
O	506	512	always
O	513	519	return
O	520	524	Unit
O	525	527	in
O	528	533	Scala
O	533	534	,
O	535	537	so
O	538	542	read
O	543	544	=
O	545	555	input.read
O	556	563	returns
O	564	568	Unit
O	568	569	,
O	570	575	which
O	576	581	never
O	582	588	equals
O	589	591	-1
O	591	592	.

O	593	596	You
O	597	600	can
O	601	603	do
O	604	606	it
O	607	611	like
O	612	616	this
O	617	618	:
O	619	638	@codeSnippetRemoved

O	639	642	You
O	643	648	could
O	649	651	do
O	652	656	this
O	657	658	:
O	659	678	@codeSnippetRemoved

O	679	682	def
O	683	689	stream
O	690	691	(
O	691	702	inputStream
O	703	704	:
B-API	705	716	InputStream
O	716	717	,
O	718	730	outputStream
O	731	732	:
B-API	733	745	OutputStream
O	745	746	)
O	747	749	={
O	750	753	val
O	754	760	buffer
O	761	762	=
O	763	766	new
O	767	777	Array[Byte
O	778	779	]
O	780	781	(
O	781	786	16384
O	786	787	)
