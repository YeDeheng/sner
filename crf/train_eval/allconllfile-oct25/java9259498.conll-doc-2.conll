O	0	6	CREATE
O	7	9	OR
O	10	17	REPLACE
O	18	27	PROCEDURE
O	28	35	my_proc
O	36	37	(
O	37	40	cur
O	41	43	IN
O	44	57	SYS_REFCURSOR
O	57	58	)
O	59	61	IS

O	62	64	--
O	65	70	Using
O	71	72	a
O	73	85	pre-existing
O	86	91	TABLE
O	92	96	TYPE
O	97	101	from
O	102	105	the
O	106	109	SYS
O	110	116	schema
O	117	120	for
O	121	124	the
O	125	132	example

O	133	138	array
O	139	161	ORA_MINING_VARCHAR2_NT
O	162	163	;

O	164	169	BEGIN

O	170	175	FETCH
O	176	179	cur
O	180	184	BULK
O	185	192	COLLECT
O	193	197	INTO
O	198	203	array
O	204	205	;

O	206	209	FOR
O	210	211	i
O	212	214	IN
O	215	226	array.FIRST
O	227	229	..
O	230	240	array.LAST

O	241	245	LOOP

O	246	266	DBMS_OUTPUT.PUT_LINE
O	267	268	(
O	268	273	array
O	274	275	(
O	275	276	i
O	277	280	));

O	281	284	END
O	285	289	LOOP
O	290	291	;

O	292	294	EN
O	295	297	D;

O	298	301	The
B-Stan	302	306	JDBC
O	307	314	binding
O	315	320	would
O	321	325	then
O	326	328	be

O	329	335	String
O	336	338	[]
O	339	346	strings
O	347	348	=
O	349	352	new
O	353	359	String
O	360	362	[]
O	363	364	{
O	365	366	"
O	366	367	a
O	367	368	"
O	368	369	,
O	370	371	"
O	371	372	b
O	372	373	"
O	373	374	,
O	375	376	"
O	376	377	c
O	377	378	"
O	379	380	}
O	381	382	;

B-API	383	398	ArrayDescriptor
O	399	403	desc
O	404	405	=
O	406	409	new
B-API	410	425	ArrayDescriptor
O	426	427	(
O	427	428	"
O	428	450	ORA_MINING_VARCHAR2_NT
O	450	451	"
O	451	452	,
O	453	454	c
O	455	457	);

O	458	463	ARRAY
O	464	469	array
O	470	471	=
O	472	475	new
O	476	481	ARRAY
O	482	483	(
O	483	487	desc
O	487	488	,
O	489	490	c
O	490	491	,
O	492	499	strings
O	500	502	);

B-API	503	516	stmt.setArray
O	517	518	(
O	518	519	1
O	519	520	,
O	521	526	array
O	527	529	);

B-API	530	550	stmt.executeUpdate()
O	551	552	;

O	553	557	With
O	558	563	TABLE
O	564	566	OF
O	567	573	OBJECT
O	574	578	data
O	579	584	types
O	584	585	,
O	586	589	the
O	590	597	binding
O	598	600	is
O	601	602	a
O	603	606	bit
O	607	611	more
O	612	618	tricky
O	619	622	...
