O	0	9	Recursion
O	10	14	with
B-API	15	20	Tasks
O	21	24	and
B-API	25	32	WaitAll

O	33	42	Basically
O	43	47	here
O	48	50	is
O	51	54	the
O	55	62	problem
O	62	63	,
O	64	65	I
O	66	70	have
O	71	72	a
O	73	81	function
O	82	83	"
O	83	99	GetAllCandidates
O	99	100	"
O	101	105	that
O	106	113	accepts
O	114	115	a
O	116	120	list
O	120	121	,
O	122	132	calculates
O	133	142	something
O	142	143	,
O	144	150	alters
O	151	154	the
O	155	165	parameters
O	166	169	and
O	170	175	calls
O	176	182	itself
O	183	188	using
B-API	189	210	Task.Factory.StartNew
O	211	213	to
O	214	223	calculate
O	224	227	all
O	228	236	possible
O	237	244	outputs
O	245	249	with
O	250	259	different
O	260	266	morphs
O	267	269	of
O	270	273	the
O	274	282	original
O	283	288	array
O	288	289	.

O	290	309	@codeSnippetRemoved

O	310	311	I
O	312	316	need
O	317	319	to
O	320	325	fully
O	326	333	utilize
O	334	337	the
O	338	343	cores
O	344	346	on
O	347	349	my
O	350	353	CPU
O	354	357	and
O	358	362	wait
O	363	366	for
O	367	370	all
O	371	376	tasks
O	377	379	to
O	380	386	finish
O	386	387	,
O	388	391	and
O	392	396	here
O	397	399	is
O	400	403	the
O	404	411	problem
O	411	412	.

O	413	415	If
O	416	417	I
O	418	422	call
B-API	423	430	.Wait()
O	431	434	for
O	435	438	the
O	439	443	task
O	443	444	,
O	445	447	my
O	448	453	cores
O	454	459	don't
O	460	463	get
O	464	472	utilized
O	473	474	(
O	474	477	CPU
O	478	483	usage
O	484	486	is
O	487	491	very
O	492	495	low
O	495	496	)
O	496	497	,
O	498	507	therefore
O	508	511	the
O	512	524	calculations
O	525	530	don't
O	531	537	finish
O	538	545	quickly
O	545	546	.

O	547	555	Creating
O	556	557	a
O	558	564	global
O	565	569	list
O	570	573	for
O	574	579	tasks
O	580	583	and
O	584	588	then
O	589	596	calling
B-API	597	604	WaitAll
O	605	612	doesn't
O	613	617	work
O	618	625	because
O	626	629	its
O	630	631	a
O	632	638	random
O	639	648	recursive
O	649	654	calls
O	654	655	,
O	656	659	the
O	660	664	list
O	665	667	of
O	668	673	tasks
O	674	679	isn't
O	680	685	fully
O	686	695	populated
O	696	700	when
O	701	703	my
O	704	711	program
O	712	719	reaches
O	720	723	the
O	724	728	call
O	729	732	for
B-API	733	742	WaitAll()
O	742	743	,
O	744	747	and
O	748	752	also
O	753	758	since
O	759	762	the
O	763	775	calculations
O	776	779	are
O	780	784	huge
O	784	785	,
O	786	787	I
O	788	791	get
O	792	794	an
B-API	795	815	OutOfMemoryException
O	816	820	when
O	821	822	I
O	823	826	try
O	827	830	add
O	831	833	my
O	834	839	tasks
O	840	842	to
O	843	844	a
O	845	851	global
O	852	856	task
O	857	861	list
O	861	862	.

O	863	866	any
O	867	872	hints
O	872	873	,
O	874	876	on
O	877	880	how
O	881	883	to
O	884	891	proceed
O	892	896	with
O	897	901	such
O	902	903	a
O	904	911	problem
O	911	912	?

O	913	915	It
O	916	922	sounds
O	923	927	like
O	928	932	your
O	933	937	goal
O	938	940	is
O	941	943	to
O	944	952	increase
O	953	956	the
O	957	968	performance
O	969	971	of
O	972	975	the
O	976	982	entire
O	983	990	process
O	990	991	.

O	992	1000	Assuming
O	1001	1005	that
O	1006	1009	the
O	1010	1015	order
O	1016	1018	in
O	1019	1024	which
O	1025	1028	the
O	1029	1037	for-loop
O	1038	1040	is
O	1041	1049	executed
O	1050	1052	is
O	1053	1056	not
O	1057	1066	important
O	1066	1067	,
O	1068	1071	you
O	1072	1075	can
O	1076	1079	use
B-Fram	1080	1083	TPL
O	1083	1084	.

O	1085	1087	It
O	1088	1093	would
O	1094	1097	get
O	1098	1101	you
O	1102	1103	a
O	1104	1110	faster
O	1111	1117	result
O	1118	1119	I
O	1120	1125	think
O	1125	1126	.

O	1127	1146	@codeSnippetRemoved

O	1147	1153	Update
O	1154	1155	:
O	1156	1159	Use
B-Fram	1160	1165	PLINQ
O	1166	1168	to
O	1169	1177	maintain
O	1178	1183	order

O	1184	1185	I
O	1186	1190	have
O	1191	1199	provided
O	1200	1202	an
O	1203	1210	example
O	1211	1215	that
O	1216	1220	uses
B-Fram	1221	1226	PLINQ
O	1227	1229	to
O	1230	1233	run
O	1234	1237	the
O	1238	1248	operations
O	1249	1251	in
O	1252	1260	parallel
O	1261	1264	and
O	1265	1269	then
O	1270	1276	return
O	1277	1280	the
O	1281	1287	result
O	1288	1291	set
O	1292	1294	in
O	1295	1300	their
O	1301	1309	original
O	1310	1315	order
O	1315	1316	.

O	1317	1323	Unless
O	1324	1329	these
O	1330	1340	operations
O	1341	1344	are
O	1345	1354	expensive
O	1354	1355	,
O	1356	1358	or
O	1359	1364	there
O	1365	1368	are
O	1369	1370	a
O	1371	1376	large
O	1377	1383	number
O	1384	1386	of
O	1387	1391	them
O	1391	1392	,
O	1393	1396	you
O	1397	1402	might
O	1403	1406	not
O	1407	1411	find
O	1412	1413	a
O	1414	1417	big
O	1418	1429	performance
O	1430	1438	increase
O	1438	1439	.

O	1440	1442	If
O	1443	1446	you
O	1447	1450	are
O	1451	1456	doing
O	1457	1461	some
O	1462	1467	heavy
O	1468	1474	loaded
O	1475	1479	work
O	1479	1480	,
O	1481	1483	or
O	1484	1488	have
O	1489	1490	a
O	1491	1496	large
O	1497	1505	quantity
O	1506	1508	of
O	1509	1514	items
O	1515	1517	to
O	1518	1521	run
O	1522	1529	through
O	1529	1530	,
O	1531	1535	then
O	1536	1540	this
O	1541	1547	should
O	1548	1552	help
O	1553	1556	you
O	1557	1560	out
O	1560	1561	.

O	1562	1581	@codeSnippetRemoved

O	1582	1586	Make
O	1587	1603	GetAllCandidates
O	1604	1608	keep
O	1609	1610	a
O	1611	1625	function-local
O	1626	1630	list
O	1631	1633	of
O	1634	1639	tasks
O	1640	1647	started
O	1647	1648	.

O	1649	1651	At
O	1652	1655	the
O	1656	1659	end
O	1660	1662	of
O	1663	1666	the
O	1667	1675	function
O	1676	1680	wait
O	1681	1684	for
O	1685	1689	them
O	1689	1690	.

O	1691	1695	This
O	1696	1701	still
O	1702	1710	provides
O	1711	1722	parallelism
O	1723	1725	as
O	1726	1730	long
O	1731	1733	as
O	1734	1737	you
O	1738	1743	start
O	1744	1748	more
O	1749	1753	than
O	1754	1755	1
O	1756	1760	task
O	1760	1761	.

O	1762	1765	You
O	1766	1769	can
O	1770	1773	use
O	1774	1777	the
B-API	1778	1790	Task.WhenAll
O	1791	1797	method
O	1798	1799	(
O	1799	1809	introduced
O	1810	1812	in
B-Fram	1813	1817	.NET
I-Fram	1818	1821	4.5
O	1821	1822	)
O	1823	1825	to
O	1826	1833	unravel
O	1834	1837	the
O	1838	1849	parallelism
O	1850	1852	at
O	1853	1857	each
O	1858	1862	step
O	1863	1865	of
O	1866	1870	your
O	1871	1880	recursion
O	1881	1882	:
O	1883	1902	@codeSnippetRemoved

O	1903	1907	This
O	1908	1911	way
O	1911	1912	,
O	1913	1916	you
O	1917	1922	would
O	1923	1927	only
O	1928	1932	need
O	1933	1935	to
O	1936	1940	wait
O	1941	1943	on
O	1944	1947	the
O	1948	1957	outermost
O	1958	1962	call
O	1963	1965	of
O	1966	1970	your
O	1971	1987	GetAllCandidates
O	1988	1994	method
O	1995	2001	within
O	2002	2006	your
O	2007	2018	application
O	2019	2020	(
O	2020	2022	if
O	2023	2025	at
O	2026	2029	all
O	2029	2030	)
O	2030	2031	,
O	2032	2040	blocking
O	2041	2045	just
O	2046	2049	one
O	2050	2056	thread
O	2056	2057	.

O	2058	2062	Edit
O	2063	2064	:
O	2065	2075	Equivalent
O	2076	2087	formulation
O	2088	2090	of
O	2091	2094	for
O	2095	2099	loop
O	2100	2105	using
B-Fram	2106	2110	LINQ
O	2111	2112	:
O	2113	2132	@codeSnippetRemoved
