O	0	5	Batch
O	6	12	insert
O	13	18	using
B-Stan	19	22	JPA
O	23	24	/
B-Stan	25	32	Toplink

O	33	34	I
O	35	39	have
O	40	41	a
O	42	45	web
O	46	57	application
O	58	62	that
O	63	71	receives
O	72	80	messages
O	81	88	through
O	89	91	an
B-Stan	92	96	HTTP
O	97	106	interface
O	106	107	,
O	108	112	e.g.
O	113	114	:
O	115	134	@codeSnippetRemoved

O	135	139	This
O	140	147	request
O	148	156	contains
O	157	160	the
O	161	163	ID
O	164	166	of
O	167	170	the
O	171	177	sender
O	177	178	,
O	179	182	the
O	183	185	ID
O	186	188	of
O	189	192	the
O	193	202	recipient
O	203	206	and
O	207	210	the
O	211	215	text
O	216	218	of
O	219	222	the
O	223	230	message
O	230	231	.

O	232	236	This
O	237	244	message
O	245	251	should
O	252	254	be
O	255	264	processed
O	265	269	like
O	270	271	:

O	272	279	finding
O	280	283	the
O	284	292	matching
O	293	297	User
O	298	304	object
O	305	308	for
O	309	313	both
O	314	317	the
O	318	324	source
O	325	328	and
O	329	332	the
O	333	344	destination
O	345	349	from
O	350	353	the
O	354	362	database
O	363	371	creating
O	372	373	a
O	374	378	tree
O	379	381	of
O	382	389	objects
O	390	391	:
O	392	393	a
O	394	401	Message
O	402	406	that
O	407	415	contains
O	416	417	a
O	418	423	field
O	424	427	for
O	428	431	the
O	432	439	message
O	440	444	text
O	445	448	and
O	449	452	two
O	453	457	User
O	458	465	objects
O	466	469	for
O	470	473	the
O	474	480	source
O	481	484	and
O	485	488	the
O	489	500	destination
O	501	511	persisting
O	512	516	this
O	517	521	tree
O	522	524	to
O	525	526	a
O	527	535	database
O	535	536	.

O	537	540	The
O	541	545	tree
O	546	550	will
O	551	553	be
O	554	560	loaded
O	561	563	by
O	564	569	other
O	570	582	applications
O	583	587	that
O	588	589	I
O	590	595	can't
O	596	601	touch
O	601	602	.

O	603	604	I
O	605	608	use
O	609	615	Oracle
O	616	618	as
O	619	622	the
O	623	630	backing
O	631	639	database
O	640	643	and
B-Stan	644	647	JPA
O	648	652	with
B-Stan	653	660	Toplink
O	661	664	for
O	665	668	the
O	669	677	database
O	678	686	handling
O	687	692	tasks
O	692	693	.

O	694	696	If
O	697	705	possible
O	705	706	,
O	707	710	I'd
O	711	715	stay
O	716	720	with
O	721	726	these
O	726	727	.

O	728	735	Without
O	736	740	much
O	741	753	optimization
O	754	755	I
O	756	759	can
O	760	767	achieve
O	768	771	~30
O	772	780	requests
O	781	782	/
O	783	786	sec
O	787	797	throughput
O	798	800	in
O	801	803	my
O	804	815	environment
O	815	816	.

O	817	821	That
O	822	823	'
O	824	825	s
O	826	829	not
O	830	834	much
O	834	835	,
O	836	839	I'd
O	840	847	require
O	848	852	~300
O	853	861	requests
O	862	863	/
O	864	867	sec
O	867	868	.

O	869	871	So
O	872	873	I
O	874	882	measured
O	883	888	where
O	889	892	the
O	893	904	performance
O	905	915	bottleneck
O	916	918	is
O	919	922	and
O	923	928	found
O	929	933	that
O	934	937	the
O	938	943	calls
O	944	946	to
B-API	947	959	em.persist()
O	960	965	takes
O	966	970	most
O	971	973	of
O	974	977	the
O	978	982	time
O	982	983	.

O	984	986	If
O	987	988	I
O	989	995	simply
O	996	1003	comment
O	1004	1007	out
O	1008	1012	that
O	1013	1017	line
O	1017	1018	,
O	1019	1022	the
O	1023	1033	throughput
O	1034	1036	go
O	1037	1041	well
O	1042	1046	over
O	1047	1051	1000
O	1052	1060	requests
O	1061	1062	/
O	1063	1066	sec
O	1066	1067	.

O	1068	1069	I
O	1070	1075	tried
O	1076	1078	to
O	1079	1084	write
O	1085	1086	a
O	1087	1092	small
O	1093	1097	test
O	1098	1109	application
O	1110	1114	that
O	1115	1119	used
O	1120	1126	simple
B-Stan	1127	1131	JDBC
O	1132	1137	calls
O	1138	1140	to
O	1141	1148	persist
O	1149	1150	1
O	1151	1158	million
O	1159	1167	messages
O	1168	1170	to
O	1171	1174	the
O	1175	1179	same
O	1180	1188	database
O	1188	1189	.

O	1190	1191	I
O	1192	1196	used
O	1197	1205	batching
O	1205	1206	,
O	1207	1214	meaning
O	1215	1216	I
O	1217	1220	did
O	1221	1224	100
O	1225	1232	inserts
O	1233	1237	then
O	1238	1239	a
O	1240	1246	commit
O	1246	1247	,
O	1248	1251	and
O	1252	1260	repeated
O	1261	1266	until
O	1267	1270	all
O	1271	1274	the
O	1275	1282	records
O	1283	1286	was
O	1287	1289	in
O	1290	1293	the
O	1294	1302	database
O	1302	1303	.

O	1304	1305	I
O	1306	1314	measured
O	1315	1319	~500
O	1320	1328	requests
O	1329	1330	/
O	1331	1334	sec
O	1335	1345	throughput
O	1346	1348	in
O	1349	1353	this
O	1354	1362	scenario
O	1362	1363	,
O	1364	1368	that
O	1369	1374	would
O	1375	1379	meet
O	1380	1382	my
O	1383	1388	needs
O	1388	1389	.

O	1390	1392	It
O	1393	1395	is
O	1396	1401	clear
O	1402	1406	that
O	1407	1408	I
O	1409	1413	need
O	1414	1416	to
O	1417	1425	optimize
O	1426	1432	insert
O	1433	1444	performance
O	1445	1449	here
O	1449	1450	.

O	1451	1458	However
O	1459	1461	as
O	1462	1463	I
O	1464	1473	mentioned
O	1474	1481	earlier
O	1482	1483	I
O	1484	1489	would
O	1490	1494	like
O	1495	1497	to
O	1498	1502	keep
O	1503	1508	using
B-Stan	1509	1512	JPA
O	1513	1516	and
B-Fram	1517	1524	Toplink
O	1525	1528	for
O	1529	1533	this
O	1533	1534	,
O	1535	1538	not
O	1539	1543	pure
B-Stan	1544	1548	JDBC
O	1548	1549	.

O	1550	1552	Do
O	1553	1556	you
O	1557	1561	know
O	1562	1563	a
O	1564	1567	way
O	1568	1570	to
O	1571	1577	create
O	1578	1583	batch
O	1584	1591	inserts
O	1592	1596	with
B-Stan	1597	1600	JPA
O	1601	1604	and
B-Fram	1605	1612	Toplink
O	1612	1613	?

O	1614	1617	Can
O	1618	1621	you
O	1622	1631	recommend
O	1632	1635	any
O	1636	1641	other
O	1642	1651	technique
O	1652	1655	for
O	1656	1665	improving
B-Stan	1666	1669	JPA
O	1670	1677	persist
O	1678	1689	performance
O	1689	1690	?

O	1691	1701	ADDITIONAL
O	1702	1706	INFO
O	1707	1708	:

O	1709	1710	"
O	1710	1718	requests
O	1719	1720	/
O	1721	1724	sec
O	1724	1725	"
O	1726	1731	means
O	1732	1736	here
O	1737	1738	:
O	1739	1744	total
O	1745	1751	number
O	1752	1754	of
O	1755	1763	requests
O	1764	1765	/
O	1766	1771	total
O	1772	1776	time
O	1777	1781	from
O	1782	1791	beginning
O	1792	1794	of
O	1795	1799	test
O	1800	1802	to
O	1803	1807	last
O	1808	1814	record
O	1815	1822	written
O	1823	1825	to
O	1826	1834	database
O	1834	1835	.

O	1836	1837	I
O	1838	1843	tried
O	1844	1846	to
O	1847	1851	make
O	1852	1855	the
O	1856	1861	calls
O	1862	1864	to
B-API	1865	1877	em.persist()
O	1878	1890	asynchronous
O	1891	1893	by
O	1894	1902	creating
O	1903	1905	an
O	1906	1915	in-memory
O	1916	1921	queue
O	1922	1929	between
O	1930	1933	the
B-Stan	1934	1941	servlet
O	1942	1947	stuff
O	1948	1951	and
O	1952	1955	the
O	1956	1965	persister
O	1965	1966	.

O	1967	1969	It
O	1970	1976	helped
O	1977	1980	the
O	1981	1992	performance
O	1993	2000	greatly
O	2000	2001	.

O	2002	2009	However
O	2010	2013	the
O	2014	2019	queue
O	2020	2023	did
O	2024	2028	grow
O	2029	2035	really
O	2036	2040	fast
O	2041	2044	and
O	2045	2047	as
O	2048	2051	the
O	2052	2063	application
O	2064	2068	will
O	2069	2076	receive
O	2077	2081	~200
O	2082	2090	requests
O	2091	2092	/
O	2093	2099	second
O	2100	2112	continuously
O	2112	2113	,
O	2114	2116	It
O	2117	2119	is
O	2120	2123	not
O	2124	2126	an
O	2127	2137	acceptable
O	2138	2146	solution
O	2147	2150	for
O	2151	2153	me
O	2153	2154	.

O	2155	2157	In
O	2158	2162	this
O	2163	2172	decoupled
O	2173	2181	approach
O	2182	2183	I
O	2184	2193	collected
O	2194	2202	requests
O	2203	2206	for
O	2207	2210	100
O	2211	2215	msec
O	2216	2219	and
O	2220	2226	called
B-API	2227	2239	em.persist()
O	2240	2242	on
O	2243	2246	all
O	2247	2256	collected
O	2257	2262	items
O	2263	2269	before
O	2270	2279	commiting
O	2280	2283	the
O	2284	2295	transaction
O	2295	2296	.

O	2297	2300	The
B-API	2301	2321	EntityManagerFactory
O	2322	2324	is
O	2325	2331	cached
O	2332	2339	between
O	2340	2344	each
O	2345	2356	transaction
O	2356	2357	.

O	2358	2362	What
O	2363	2365	is
O	2366	2370	your
O	2371	2378	measure
O	2379	2381	of
O	2382	2383	"
O	2383	2391	requests
O	2392	2393	/
O	2394	2397	sec
O	2397	2398	"
O	2398	2399	?

O	2400	2402	In
O	2403	2408	other
O	2409	2414	words
O	2414	2415	,
O	2416	2420	what
O	2421	2428	happens
O	2429	2432	for
O	2433	2436	the
O	2437	2441	31st
O	2442	2449	request
O	2449	2450	?

O	2451	2455	What
O	2456	2464	resource
O	2465	2467	is
O	2468	2473	being
O	2474	2481	blocked
O	2481	2482	?

O	2483	2485	If
O	2486	2488	it
O	2489	2491	is
O	2492	2495	the
O	2496	2505	front-end
O	2506	2507	/
B-Stan	2508	2515	servlet
O	2516	2517	/
O	2518	2521	web
O	2522	2529	portion
O	2529	2530	,
O	2531	2534	can
O	2535	2538	you
O	2539	2542	run
B-API	2543	2555	em.persist()
O	2556	2558	in
O	2559	2566	another
O	2567	2573	thread
O	2574	2577	and
O	2578	2584	return
O	2585	2596	immediately
O	2596	2597	?

O	2598	2602	Also
O	2602	2603	,
O	2604	2607	are
O	2608	2611	you
O	2612	2620	creating
O	2621	2633	transactions
O	2634	2638	each
O	2639	2643	time
O	2643	2644	?

O	2645	2648	Are
O	2649	2652	you
O	2653	2661	creating
B-API	2662	2682	EntityManagerFactory
O	2683	2690	objects
O	2691	2695	with
O	2696	2700	each
O	2701	2708	request
O	2708	2709	?

O	2710	2713	You
O	2714	2720	should
O	2721	2729	decouple
O	2730	2734	from
O	2735	2738	the
B-Stan	2739	2742	JPA
O	2743	2752	interface
O	2753	2756	and
O	2757	2760	use
O	2761	2764	the
O	2765	2769	bare
B-API	2770	2777	TopLink
O	2778	2781	API
O	2781	2782	.

O	2783	2786	You
O	2787	2790	can
O	2791	2799	probably
O	2800	2805	chuck
O	2806	2809	the
O	2810	2817	objects
O	2818	2824	you're
O	2825	2835	persisting
O	2836	2840	into
O	2841	2842	a
B-API	2843	2853	UnitOfWork
O	2854	2857	and
O	2858	2864	commit
O	2865	2868	the
B-API	2869	2879	UnitOfWork
O	2880	2882	on
O	2883	2887	your
O	2888	2896	schedule
O	2897	2898	(
O	2898	2902	sync
O	2903	2905	or
O	2906	2911	async
O	2911	2912	)
O	2912	2913	.

O	2914	2918	Note
O	2919	2923	that
O	2924	2927	one
O	2928	2930	of
O	2931	2934	the
O	2935	2940	costs
O	2941	2943	of
B-API	2944	2956	em.persist()
O	2957	2959	is
O	2960	2963	the
O	2964	2972	implicit
O	2973	2978	clone
O	2979	2983	that
O	2984	2991	happens
O	2992	2994	of
O	2995	2998	the
O	2999	3004	whole
O	3005	3011	object
O	3012	3017	graph
O	3017	3018	.

B-API	3019	3026	TopLink
O	3027	3031	will
O	3032	3036	work
O	3037	3043	rather
O	3044	3050	better
O	3051	3053	if
O	3054	3057	you
B-API	3058	3078	uow.registerObject()
O	3079	3083	your
O	3084	3087	two
O	3088	3092	user
O	3093	3100	objects
O	3101	3109	yourself
O	3109	3110	,
O	3111	3117	saving
O	3118	3124	itself
O	3125	3128	the
O	3129	3137	identity
O	3138	3143	tests
O	3144	3146	it
O	3147	3150	has
O	3151	3153	to
O	3154	3163	otherwise
O	3164	3166	do
O	3166	3167	.

O	3168	3170	So
O	3171	3177	you'll
O	3178	3181	end
O	3182	3184	up
O	3185	3189	with
O	3190	3191	:
O	3192	3211	@codeSnippetRemoved

O	3212	3216	This
O	3217	3219	is
O	3220	3224	very
O	3225	3228	old
O	3229	3235	school
B-API	3236	3243	TopLink
O	3244	3247	btw
O	3248	3250	;)

O	3251	3255	Note
O	3256	3260	that
O	3261	3264	the
O	3265	3270	batch
O	3271	3275	will
O	3276	3280	help
O	3281	3282	a
O	3283	3286	lot
O	3286	3287	,
O	3288	3295	because
O	3296	3301	batch
O	3302	3309	writing
O	3310	3313	and
O	3314	3318	more
O	3319	3329	especially
O	3330	3335	batch
O	3336	3343	writing
O	3344	3348	with
O	3349	3358	parameter
O	3359	3366	binding
O	3367	3371	will
O	3372	3376	kick
O	3377	3379	in
O	3380	3385	which
O	3386	3389	for
O	3390	3394	this
O	3395	3401	simple
O	3402	3409	example
O	3410	3414	will
O	3415	3423	probably
O	3424	3428	have
O	3429	3430	a
O	3431	3435	very
O	3436	3441	large
O	3442	3448	impact
O	3449	3451	on
O	3452	3456	your
O	3457	3468	performance
O	3468	3469	.

O	3470	3475	Other
O	3476	3482	things
O	3483	3485	to
O	3486	3490	look
O	3491	3494	for
O	3495	3496	:
O	3497	3501	your
O	3502	3512	sequencing
O	3513	3517	size
O	3517	3518	.

O	3519	3520	A
O	3521	3524	lot
O	3525	3527	of
O	3528	3531	the
O	3532	3536	time
O	3537	3542	spent
O	3543	3550	writing
O	3551	3558	objects
O	3559	3561	in
B-API	3562	3569	TopLink
O	3570	3572	is
O	3573	3581	actually
O	3582	3587	spent
O	3588	3595	reading
O	3596	3606	sequencing
O	3607	3618	information
O	3619	3623	from
O	3624	3627	the
O	3628	3636	database
O	3636	3637	,
O	3638	3648	especially
O	3649	3653	with
O	3654	3657	the
O	3658	3663	small
O	3664	3672	defaults
O	3673	3674	(
O	3674	3675	I
O	3676	3681	would
O	3682	3690	probably
O	3691	3695	have
O	3696	3703	several
O	3704	3711	hundred
O	3712	3714	or
O	3715	3719	even
O	3720	3724	more
O	3725	3727	as
O	3728	3730	my
O	3731	3739	sequence
O	3740	3744	size
O	3744	3745	)
O	3745	3746	.
