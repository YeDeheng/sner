O	0	8	Covering
O	9	14	index
O	15	23	decision
O	24	26	in
B-PL	27	32	MySQL

O	33	35	My
B-PL	36	41	MySQL
O	42	46	slow
O	47	52	query
O	53	56	log
O	57	63	showed
O	64	65	a
O	66	71	query
O	72	76	that
O	77	82	looks
O	83	89	rather
O	90	96	simple
O	97	99	as
O	100	103	one
O	104	106	of
O	107	110	the
O	111	118	slowest
O	119	126	queries
O	127	130	run
O	131	133	on
O	134	136	my
O	137	143	server
O	144	145	:
O	146	165	@codeSnippetRemoved

O	166	169	I'm
O	170	179	basically
O	180	186	trying
O	187	189	to
O	190	194	find
O	195	198	the
O	199	206	average
O	207	213	points
O	214	219	total
O	220	223	for
O	224	225	a
O	226	234	subgroup
O	235	236	(
O	236	239	set
O	240	242	of
O	243	247	uids
O	247	248	,
O	249	253	e.g.
O	254	259	based
O	260	262	on
O	263	269	gender
O	270	272	or
O	273	281	whatever
O	281	282	)
O	283	285	of
O	286	287	a
O	288	293	group
O	293	294	.

O	295	300	There
O	301	304	are
O	305	315	individual
O	316	323	indexes
O	324	326	on
O	327	330	uid
O	331	334	and
O	335	338	gid
O	338	339	,
O	340	343	but
B-API	344	351	EXPLAIN
O	352	357	shows
O	358	362	that
O	363	370	they're
O	371	374	not
O	375	380	being
O	381	385	used
O	386	387	:
O	388	407	@codeSnippetRemoved

O	408	411	Now
O	411	412	,
O	413	416	the
O	417	424	obvious
O	425	433	solution
O	433	434	,
O	435	437	as
O	438	439	I
O	440	450	understand
O	451	453	it
O	453	454	,
O	455	457	is
O	458	460	to
O	461	465	have
O	466	467	a
O	468	476	covering
O	477	482	index
O	483	487	over
O	488	493	these
O	494	500	fields
O	501	502	:
O	503	522	@codeSnippetRemoved

O	523	526	And
O	527	533	indeed
O	533	534	,
O	535	539	this
O	540	545	makes
O	546	548	it
O	549	552	use
O	553	556	the
O	557	562	index
O	563	564	:
O	565	584	@codeSnippetRemoved

O	585	592	However
O	592	593	,
O	594	595	I
O	596	600	have
O	601	604	two
O	605	614	questions
O	615	616	:

O	617	619	In
O	620	623	the
O	624	629	Extra
O	630	635	field
O	635	636	,
B-API	637	644	EXPLAIN
O	645	648	now
O	649	653	says
O	654	655	"
O	655	660	Using
O	661	666	where
O	667	668	;
O	669	674	Using
O	675	680	index
O	681	682	;
O	683	688	Using
O	689	698	temporary
O	699	700	;
O	701	706	Using
O	707	715	filesort
O	715	716	"
O	716	717	.

O	718	722	This
O	723	725	is
O	726	729	bad
O	729	730	,
O	731	736	right
O	736	737	?

O	738	740	So
O	741	747	should
O	748	749	I
O	750	753	use
O	754	758	this
O	759	764	index
O	765	767	or
O	768	771	not
O	771	772	?

O	773	775	In
O	776	781	dummy
O	782	787	terms
O	787	788	,
O	789	791	is
O	792	794	it
O	795	799	more
O	800	809	important
O	810	812	to
O	813	817	have
O	818	828	type=index
O	829	832	and
O	833	846	key=something
O	847	851	than
O	852	856	what
O	857	864	happens
O	865	867	in
O	868	871	the
O	872	873	"
O	873	878	extra
O	878	879	"
O	880	885	field
O	885	886	,
O	887	889	or
O	890	893	not
O	893	894	?

O	895	899	What
O	900	903	are
O	904	907	the
O	908	915	effects
O	916	918	of
O	919	925	having
O	926	927	a
O	928	936	covering
O	937	942	index
O	943	945	on
O	946	951	large
O	952	959	inserts
O	959	960	?

O	961	962	I
O	963	965	am
O	966	975	inserting
O	976	982	points
O	983	985	in
O	986	990	this
O	991	995	same
O	996	1001	table
O	1002	1004	by
O	1005	1010	doing
O	1011	1012	a
B-API	1013	1017	JOIN
O	1018	1019	-
B-API	1020	1026	UPDATE
O	1027	1031	with
O	1032	1033	a
O	1034	1039	quite
O	1040	1045	large
O	1046	1055	temporary
O	1056	1061	table
O	1061	1062	.

O	1063	1064	I
O	1065	1073	wouldn't
O	1074	1078	want
O	1079	1081	to
O	1082	1086	slow
O	1087	1091	this
O	1092	1096	down
O	1097	1100	too
O	1101	1105	much
O	1105	1106	.

O	1107	1112	Using
O	1113	1122	Temporary
O	1123	1125	in
O	1126	1129	the
O	1130	1137	explain
O	1138	1144	output
O	1145	1150	means
O	1151	1155	that
O	1156	1157	a
O	1158	1167	temporary
O	1168	1173	table
O	1174	1177	was
O	1178	1185	created
O	1186	1188	to
O	1189	1196	satisfy
O	1197	1200	the
O	1201	1206	group
O	1207	1209	by
O	1210	1219	condition
O	1219	1220	.

O	1221	1225	This
O	1226	1228	is
O	1229	1232	not
O	1233	1237	very
O	1238	1241	bad
O	1242	1245	but
O	1246	1250	much
O	1251	1257	better
O	1258	1269	performance
O	1270	1273	can
O	1274	1276	be
O	1277	1285	achieved
O	1286	1288	if
O	1289	1292	you
O	1293	1301	optimise
O	1302	1307	group
O	1308	1310	by
O	1311	1314	for
O	1315	1316	"
O	1316	1321	Loose
O	1322	1327	Index
O	1328	1332	Scan
O	1332	1333	"
O	1333	1334	.

O	1335	1337	In
O	1338	1343	order
O	1344	1347	for
O	1348	1352	this
O	1353	1358	query
O	1359	1361	to
O	1362	1367	avoid
O	1368	1369	a
O	1370	1379	temporary
O	1380	1385	table
O	1385	1386	,
O	1387	1390	the
O	1391	1394	gid
O	1395	1401	column
O	1402	1405	has
O	1406	1408	to
O	1409	1411	be
O	1412	1419	indexed
O	1420	1422	so
O	1423	1425	it
O	1426	1428	is
O	1429	1432	the
O	1433	1437	left
O	1438	1442	most
O	1443	1447	part
O	1448	1450	of
O	1451	1452	a
O	1453	1462	composite
O	1463	1466	key
O	1467	1469	or
O	1470	1471	a
O	1472	1478	single
O	1479	1485	column
O	1486	1491	index
O	1491	1492	.

O	1493	1495	To
O	1496	1503	further
O	1504	1511	improve
O	1512	1514	it
O	1514	1515	,
O	1516	1519	uid
O	1520	1522	as
O	1523	1524	a
O	1525	1531	single
O	1532	1538	column
O	1539	1544	index
O	1545	1547	is
O	1548	1552	also
O	1553	1554	a
O	1555	1559	good
O	1560	1565	chice
O	1566	1567	:
O	1568	1587	@codeSnippetRemoved

O	1588	1594	Update
O	1595	1596	:

O	1597	1599	As
O	1600	1604	@Dow
O	1605	1614	correctly
O	1615	1622	pointed
O	1623	1626	out
O	1626	1627	,
O	1628	1631	the
O	1632	1635	use
O	1636	1638	of
B-API	1639	1644	AVG()
O	1645	1657	disqualifies
O	1658	1661	the
O	1662	1667	query
O	1668	1671	for
O	1672	1677	index
O	1678	1684	access
O	1685	1690	group
O	1691	1693	by
O	1694	1706	calculations
O	1706	1707	,
O	1708	1712	only
B-API	1713	1718	MIN()
O	1719	1722	and
B-API	1723	1728	MAX()
O	1729	1737	wouldn't
O	1737	1738	.

O	1739	1742	The
O	1743	1751	proposed
O	1752	1759	indexes
O	1760	1772	nevertheless
O	1773	1779	should
O	1780	1785	still
O	1786	1790	give
O	1791	1797	better
O	1798	1809	performance
O	1809	1810	.

O	1811	1813	In
O	1814	1821	general
O	1821	1822	,
O	1823	1826	you
O	1827	1830	can
O	1831	1834	use
O	1835	1837	an
O	1838	1843	index
O	1844	1846	to
O	1847	1855	optimize
O	1856	1859	the
O	1860	1865	range
O	1866	1875	predicate
O	1876	1878	of
B-API	1879	1881	IN
O	1882	1883	(
O	1883	1886	...
O	1886	1887	)
O	1887	1888	,
O	1889	1891	or
O	1892	1895	you
O	1896	1899	can
O	1900	1903	use
O	1904	1906	an
O	1907	1912	index
O	1913	1915	to
O	1916	1924	optimize
O	1925	1928	out
O	1929	1932	the
O	1933	1937	temp
O	1938	1943	table
O	1944	1950	caused
O	1951	1953	by
O	1954	1957	the
O	1958	1963	GROUP
O	1964	1966	BY
O	1967	1968	(
O	1968	1974	though
O	1975	1978	you
O	1979	1983	make
O	1984	1985	a
O	1986	1990	good
O	1991	1996	point
O	1997	2001	that
O	2002	2006	this
O	2007	2010	may
O	2011	2014	not
O	2015	2019	work
O	2020	2024	with
B-API	2025	2030	AVG()
O	2030	2031	)
O	2031	2032	.

O	2033	2036	But
O	2037	2040	you
O	2041	2046	can't
O	2047	2054	achieve
O	2055	2059	both
O	2060	2064	uses
O	2065	2067	of
O	2068	2075	indexes
O	2076	2078	in
O	2079	2082	the
O	2083	2087	same
B-API	2088	2094	SELECT
O	2094	2095	.

O	2096	2099	I'm
O	2100	2105	going
O	2106	2108	to
O	2109	2117	conclude
O	2118	2122	that
O	2123	2126	you
O	2127	2132	can't
O	2133	2136	get
O	2137	2140	rid
O	2141	2143	of
O	2144	2147	the
O	2148	2152	temp
O	2153	2158	table
O	2159	2161	in
O	2162	2166	this
O	2167	2177	particular
O	2178	2183	query
O	2183	2184	.

O	2185	2188	The
O	2189	2193	best
O	2194	2197	you
O	2198	2201	can
O	2202	2204	do
O	2205	2207	is
O	2208	2211	try
O	2212	2214	to
O	2215	2219	keep
O	2220	2222	it
O	2223	2227	from
O	2228	2233	going
O	2234	2236	to
O	2237	2241	disk
O	2242	2244	by
O	2245	2255	increasing
O	2256	2270	tmp_table_size
O	2270	2271	.

O	2272	2274	Or
O	2275	2277	if
O	2278	2280	it
O	2281	2285	does
O	2286	2288	go
O	2289	2291	to
O	2292	2296	disk
O	2296	2297	,
O	2298	2307	configure
O	2308	2309	a
O	2310	2315	tmpfs
O	2316	2326	filesystem
O	2327	2330	and
O	2331	2334	use
O	2335	2339	that
O	2340	2345	mount
O	2346	2351	point
O	2352	2354	as
O	2355	2359	your
O	2360	2366	tmpdir
O	2366	2367	.

O	2368	2370	So
O	2371	2374	you
O	2375	2379	have
O	2380	2382	to
O	2383	2389	choose
O	2389	2390	,
O	2391	2393	do
O	2394	2397	you
O	2398	2402	want
O	2403	2405	to
O	2406	2412	search
O	2413	2415	an
O	2416	2421	index
O	2422	2425	for
O	2426	2430	your
O	2431	2435	list
O	2436	2438	of
O	2439	2442	uid
O	2443	2449	values
O	2449	2450	?

O	2451	2454	You
O	2455	2459	have
O	2460	2461	a
O	2462	2468	really
O	2469	2473	long
O	2474	2478	list
O	2479	2481	of
O	2482	2487	uid's
O	2487	2488	,
O	2489	2491	so
O	2492	2496	that
O	2497	2498	'
O	2499	2500	s
O	2501	2506	going
O	2507	2509	to
O	2510	2512	be
O	2513	2519	costly
O	2520	2524	just
O	2525	2527	to
O	2528	2536	estimate
O	2537	2540	the
O	2541	2544	row
O	2545	2550	count
O	2550	2551	.

O	2552	2554	Be
O	2555	2559	sure
O	2560	2562	to
O	2563	2570	upgrade
O	2571	2573	to
B-PL	2574	2579	MySQL
I-PL	2580	2583	5.6
O	2583	2584	,
O	2585	2590	which
O	2591	2594	has
O	2595	2599	some
O	2600	2603	new
O	2604	2617	optimizations
O	2618	2620	in
O	2621	2625	this
O	2626	2630	area
O	2631	2632	(
O	2632	2635	see
O	2636	2644	Equality
O	2645	2650	Range
O	2651	2663	Optimization
O	2664	2666	of
O	2667	2678	Many-Valued
O	2679	2690	Comparisons
O	2690	2691	)
O	2691	2692	.

O	2693	2696	The
O	2697	2707	type=index
O	2708	2713	means
O	2714	2716	it
O	2717	2718	'
O	2719	2720	s
O	2721	2726	doing
O	2727	2729	an
O	2730	2735	index
O	2736	2740	scan
O	2740	2741	,
O	2742	2747	which
O	2748	2750	is
O	2751	2757	costly
O	2758	2761	but
O	2762	2764	at
O	2765	2770	least
O	2771	2773	it
O	2774	2775	'
O	2776	2777	s
O	2778	2785	getting
O	2786	2793	results
O	2794	2798	from
O	2799	2802	the
O	2803	2808	index
O	2809	2814	alone
O	2815	2822	instead
O	2823	2825	of
O	2826	2832	having
O	2833	2835	to
O	2836	2840	read
O	2841	2846	table
O	2847	2851	rows
O	2851	2852	.

O	2853	2855	So
O	2856	2858	it
O	2859	2864	needs
O	2865	2870	fewer
O	2871	2877	buffer
O	2878	2882	pool
O	2883	2888	pages
O	2889	2891	to
O	2892	2899	satisfy
O	2900	2904	this
O	2905	2910	query
O	2910	2911	.
