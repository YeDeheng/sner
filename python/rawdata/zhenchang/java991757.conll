Best	O
practice	O
for	O
parameter	O
naming	O
in	O
Java	B-PL
constructors	O
and	O
simple	O
setters	O

Is	O
there	O
a	O
standard	O
acceptable	O
convention	O
for	O
parameters	O
in	O
Java	B-PL
to	O
straightforward	O
constructors	O
and	O
setters	O
?	O

(	O
I've	O
seen	O
the	O
answer	O
for	O
C++	B-PL
,	O
but	O
practices	O
are	O
often	O
different	O
between	O
the	O
two	O
communities	O
)	O

Suppose	O
that	O
I	O
have	O
a	O
class	O
C	B-PL
with	O
a	O
foo	O
field	O
.	O

I	O
have	O
commonly	O
seen	O
the	O
following	O
three	O
options	O
:	O

1	O
)	O
Use	O
the	O
actual	O
field	O
name	O
with	O
an	O
underscore	O
:	O

2	O
)	O
Use	O
the	O
actual	O
field	O
name	O
,	O
just	O
use	O
"	O
this	O
"	O
in	O
setting	O
:	O

3	O
)	O
Completely	O
inconsistent	O
things	O
like	O
:	O

I	O
tend	O
to	O
use	O
2	O
,	O
but	O
I'm	O
wondering	O
what	O
'	O
s	O
correct	O
practice	O
.	O

I	O
have	O
seen	O
2	O
and	O
3	O
used	O
the	O
most	O
.	O

That	O
said	O
,	O
the	O
answer	O
is	O
dictated	O
by	O
what	O
the	O
accepted	O
standard	O
is	O
for	O
the	O
code	O
base	O
you	O
are	O
contributing	O
to	O
.	O

I	O
think	O
it	O
is	O
more	O
important	O
to	O
be	O
consistent	O
across	O
the	O
project	O
than	O
have	O
one	O
"	O
right	O
"	O
answer	O
for	O
every	O
single	O
java	B-PL
developer	O
.	O

Eclipse	B-MISC
code	O
genration	O
uses	O
style	O
#2	O
from	O
your	O
list	O
.	O

Option	O
two	O
is	O
most	O
common	O
.	O

In	O
Java	B-PL
it	O
'	O
s	O
considered	O
poor	O
practice	O
to	O
use	O
meaningless	O
name	O
prefixes	O
or	O
suffixes	O
to	O
distinguish	O
instance	O
variables	O
from	O
parameters	O
from	O
local	O
variables	O
.	O

But	O
there	O
are	O
no	O
conventions	O
for	O
the	O
names	O
themselves	O
.	O

Use	O
whatever	O
names	O
make	O
the	O
code	O
easiest	O
to	O
understand	O
.	O

I	O
know	O
that	O
when	O
netbeans	B-MISC
automatically	O
creates	O
getters	O
and	O
setters	O
it	O
uses	O
number	O
2	O
method	O
.	O

I	O
personally	O
usually	O
add	O
temp	O
to	O
the	O
variable	O
i.e	B-API
foo	O
=	O
tempfoo	O
.	O

But	O
as	O
neesh	O
says	O
you	O
should	O
try	O
to	O
remain	O
consistent	O
regardless	O
of	O
which	O
method	O
you	O
choose	O

(	O
1	O
)	O
is	O
very	O
C	B-PL
/	O
C++	B-PL
.	O

Java	B-PL
doesn't	O
tend	O
to	O
use	O
leading	O
underscores	O
much	O
.	O

I	O
personally	O
use	O
(	O
2	O
)	O
almost	O
exclusively	O
.	O

(	O
3	O
)	O
is	O
just	O
making	O
your	O
life	O
difficult	O
because	O
it	O
can	O
be	O
hard	O
to	O
think	O
of	O
two	O
meaningful	O
yet	O
concise	O
names	O
for	O
the	O
member	O
and	O
the	O
parameter	O
.	O

As	O
you	O
code	O
to	O
make	O
the	O
interface	O
as	O
clear	O
as	O
possible	O
,	O
I	O
always	O
prefer	O
using	O
a	O
field	O
as	O
_name	O
internally	O
,	O
having	O
it	O
as	O
name	O
as	O
a	O
method	O
argument	O
,	O
assigning	O
it	O
elegantly	O
as	O
_name	O
=	O
name	O
.	O

I	O
have	O
seen	O
this	O
in	O
Fowler	O
'	O
s	O
Refactoring	O
and	O
other	O
similar	O
textbooks	O
,	O
though	O
I	O
see	O
ugly	O
mechanisms	O
such	O
as	O
using	O
the	O
field	O
as	O
name	O
internally	O
then	O
using	O
aName	O
as	O
a	O
method	O
argument	O
,	O
ugh	O
.	O

I've	O
also	O
seen	O
the	O
Option	O
2	O
as	O
the	O
most	O
common	O
one	O
:	O

IDEs	O
such	O
as	O
Eclipse	B-MISC
and	O
Netbeans	B-MISC
will	O
automatically	O
write	O
the	O
getters	O
and	O
setters	O
in	O
the	O
above	O
format	O
.	O

There	O
are	O
a	O
few	O
merits	O
to	O
using	O
this	O
method	O
:	O

Does	O
not	O
use	O
the	O
underscore	O
(	O
_	O
)	O
character	O
in	O
the	O
field	O
name	O
--	O
underscores	O
are	O
not	O
recommended	O
for	O
non-constant	O
field	O
names	O
.	O

The	O
use	O
of	O
the	O
underscore	O
character	O
in	O
an	O
identifier	O
is	O
not	O
recommended	O
except	O
for	O
identifiers	O
for	O
constants	O
.	O

The	O
Variables	O
page	O
of	O
The	O
Java	B-PL
Tutorials	O
mentions	O
the	O
following	O
about	O
underscores	O
:	O

If	O
your	O
variable	O
stores	O
a	O
constant	O

value	O
,	O
such	O
as	O
static	O
final	O
int	O

NUM_GEARS	O
=	O
6	O
,	O
the	O
convention	O
changes	O

slightly	O
,	O
capitalizing	O
every	O
letter	O

and	O
separating	O
subsequent	O
words	O
with	O

the	O
underscore	O
character	O
.	O

By	O

convention	O
,	O
the	O
underscore	O
character	O

is	O
never	O
used	O
elsewhere	O
.	O

(	O
Emphasis	O
added	O
.	O
)	O

Since	O
field	O
names	O
are	O
not	O
constants	O
,	O
according	O
to	O
what	O
is	O
written	O
on	O
that	O
page	O
,	O
one	O
should	O
not	O
use	O
underscores	O
in	O
non-constant	O
fields	O
.	O

IDEs	O
can	O
automatically	O
add	O
Javadoc	O
comments	O
according	O
to	O
the	O
name	O
of	O
the	O
parameter	O
of	O
the	O
method	O
,	O
so	O
having	O
the	O
name	O
of	O
the	O
field	O
in	O
the	O
parameter	O
list	O
would	O
be	O
beneficial	O
.	O

The	O
following	O
is	O
an	O
example	O
of	O
an	O
automatically	O
generated	O
Javadoc	O
:	O

Having	O
the	O
Javadoc	O
reflect	O
the	O
name	O
of	O
the	O
field	O
has	O
another	O
benefit	O
--	O
IDEs	O
that	O
have	O
code	O
completion	O
can	O
use	O
the	O
field	O
name	O
in	O
the	O
Javadoc	O
in	O
order	O
to	O
automatically	O
fill	O
out	O
parameter	O
names	O
:	O

Giving	O
meaning	O
to	O
the	O
field	O
name	O
and	O
parameter	O
name	O
will	O
make	O
it	O
easier	O
to	O
understand	O
what	O
the	O
parameter	O
actually	O
represents	O
.	O

Those	O
are	O
some	O
of	O
the	O
merits	O
I	O
can	O
come	O
up	O
with	O
at	O
the	O
moment	O
,	O
and	O
I	O
believe	O
that	O
it	O
is	O
most	O
likely	O
the	O
most	O
common	O
way	O
to	O
naming	O
parameters	O
in	O
Java	B-PL
.	O

Option	O
two	O
.	O

If	O
you	O
see	O
a	O
"	O
setFoo	O
(	O
String	O
foo	O
)"	O
definition	O
(	O
e.g.	O
in	O
javadoc	O
or	O
hover	O
)	O
you	O
would	O
be	O
reasonable	O
to	O
expect	O
that	O
the	O
field	O
"	O
foo	O
"	O
is	O
set	O
to	O
the	O
value	O
of	O
the	O
parameter	O
"	O
foo	O
"	O
.	O

Other	O
names	O
may	O
require	O
you	O
to	O
double	O
check	O
-	O
e.g.	O
would	O
setName	O
(	O
String	O
person	O
)	O
just	O
set	O
the	O
name	O
to	O
person	O
or	O
would	O
additional	O
action	O
be	O
taken	O
(	O
look	O
up	O
the	O
name	O
in	O
a	O
table	O
of	O
persons	O
etc	O
)	O
?.	O

The	O
usual	O
reason	O
for	O
not	O
doing	O
so	O
is	O
that	O
you	O
may	O
accidentially	O
write	O

...	O

foo	O
=	O
foo	O
;	O

instead	O
of	O

this.foo	B-API
=	O
foo	O
;	O

which	O
is	O
a	O
self-assignment	O
of	O
the	O
parameter	O
not	O
doing	O
anything	O
.	O

Modern	O
compilers	O
catch	O
this	O
-	O
modern	O
IDE	O
generates	O
the	O
"	O
this.foo	B-API
=	O
foo	O
"	O
statement	O
when	O
creating	O
a	O
setter	O
for	O
a	O
field	O
.	O

In	O
Eclipse	B-MISC
you	O
can	O
create	O
the	O
getter	O
and	O
setter	O
for	O
a	O
field	O
,	O
with	O
Ctrl-1	O
when	O
the	O
cursor	O
is	O
located	O
on	O
the	O
field	O
in	O
question	O
.	O

the	O
convention	O
that	O
I	O
use	O
is	O
to	O
preface	O
member	O
variables	O
with	O
m_	O
;	O
as	O
in	O
:	O

String	O
m_foo	O
;	O

that	O
way	O
,	O
it	O
is	O
very	O
clear	O
which	O
variables	O
are	O
members	O
and	O
which	O
are	O
not	O
.	O

also	O
,	O
my	O
last	O
company	O
prefaced	O
all	O
the	O
arguments	O
in	O
a	O
method	O
with	O
"	O
the	O
"	O
,	O
as	O
in	O
:	O

public	O
doFoo	O
(	O
String	O
theKey	O
,	O
String	O
theRandom	O
)	O
{	O

....	O

}	O

it	O
made	O
it	O
very	O
easy	O
to	O
not	O
confuse	O
the	O
arguments	O
with	O
internal	O
variables	O
.	O

conventions	O
should	O
be	O
about	O
making	O
the	O
code	O
easier	O
to	O
read	O
,	O
and	O
reducing	O
errors	O
.	O

Option	O
2	O
is	O
most	O
common	O
in	O
Java	B-PL
but	O
a	O
picky	O
Checkstyle	O
won't	O
let	O
you	O
use	O
this	O
option	O
because	O
the	O
name	O
of	O
the	O
local	O
var	O
shadows	O
the	O
other	O
.	O

Because	O
of	O
that	O
most	O
use	O
the	O
following	O
:	O

foo	O
(	O
int	O
thatBar	O
)	O
{	O

this.bar	B-API
=	O
thatBar	O
;	O

}	O

The	O
only	O
problem	O
using	O
this	O
option	O
is	O
that	O
others	O
may	O
guess	O
that	O
you	O
are	O
using	O
a	O
var	O
named	O
bar	O
in	O
your	O
class	O
because	O
if	O
not	O
you	O
wouldn't	O
name	O
the	O
parameter	O
so	O
.	O

An	O
evil	O
person	O
could	O
use	O
that	O
information	O
to	O
better	O
understand	O
your	O
class	O
only	O
by	O
looking	O
at	O
the	O
methods	O
.	O

But	O
for	O
that	O
you	O
would	O
use	O
an	O
obfuscator	O
which	O
renames	O
all	O
vars	O
etc	O
.	O

Yes	O
option	O
2	O
is	O
most	O
widely	O
used	O
;	O
although	O
it	O
has	O
a	O
severe	O
problem	O
:	O
if	O
you	O
have	O
a	O
typo	O
in	O
the	O
declaration	O
of	O
your	O
parameter	O
-	O
that	O
might	O
go	O
unnoticed	O
,	O
like	O
:	O

This	O
code	O
compiles	O
fine	O
;	O
and	O
it	O
takes	O
you	O
a	O
second	O
to	O
understand	O
what	O
is	O
wrong	O
in	O
there	O
.	O

Yes	O
,	O
nowadays	O
you	O
might	O
see	O
a	O
warning	O
about	O
that	O
,	O
or	O
some	O
code	O
checking	O
tool	O
tells	O
you	O
that	O
this	O
happened	O
;	O
and	O
of	O
course	O
,	O
your	O
unit	O
tests	O
should	O
find	O
it	O
immediately	O
.	O

But	O
:	O
if	O
you	O
avoid	O
this	O
pattern	O
,	O
and	O
use	O
prefixes	O
or	O
"	O
thatString	O
"	O
you	O
will	O
never	O
hit	O
this	O
problem	O
in	O
the	O
first	O
place	O
.	O

Thus	O
I	O
really	O
don't	O
understand	O
why	O
it	O
is	O
so	O
commonly	O
used	O
.	O

So	O
,	O
we	O
sat	O
down	O
in	O
our	O
team	O
and	O
when	O
putting	O
together	O
our	O
coding	O
style	O
guide	O
we	O
said	O
:	O
never	O
use	O
option	O
2	O
.	O
