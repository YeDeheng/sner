Oracle	B-Orgs
Stored	O
procedure	O
Structured	O
Parameters	O

I	O
wish	O
to	O
pass	O
a	O
bunch	O
of	O
'	O
unknown	O
'	O
values	O
to	O
an	O
Oracle	B-Orgs
stored	O
procedure	O
from	O
a	O
spring	B-Fram
java	B-PL
application	O
.	O

The	O
data	O
is	O
somewhat	O
structured	O
,	O
so	O
currently	O
we	O
have	O
a	O
stored	O
proc	O
that	O
has	O
accepts	O
2	O
clobs	O
what	O
are	O
key	O
/	O
value	O
pairs	O
of	O
the	O
data	O
.	O

The	O
first	O
clob	O
represents	O
a	O
single	O
record	O
amd	O
the	O
second	O
clob	O
,	O
represents	O
many	O
child	O
records	O
of	O
clob	O
1	O
.	O

This	O
seems	O
a	O
very	O
inefficient	O
way	O
to	O
pass	O
the	O
data	O
as	O
we	O
have	O
to	O
construct	O
strings	O
in	O
java	B-PL
in	O
the	O
forst	O
plave	O
and	O
then	O
the	O
data	O
has	O
to	O
be	O
parsed	O
in	O
the	O
stored	O
proc	O
.	O

I	O
have	O
looked	O
into	O
Oracle	B-Orgs
record	O
structures	O
,	O
however	O
it	O
appears	O
as	O
though	O
you	O
have	O
to	O
map	O
each	O
field	O
in	O
the	O
record	O
structure	O
to	O
a	O
db	O
table	O
field	O
.	O
the	O
problem	O
with	O
this	O
approach	O
is	O
a	O
)	O
the	O
data	O
items	O
that	O
we	O
send	O
each	O
time	O
differ	O
(	O
although	O
there	O
is	O
a	O
core	O
set	O
of	O
data	O
that	O
remains	O
the	O
same	O
)	O
and	O
b	O
)	O
some	O
of	O
the	O
data	O
items	O
are	O
there	O
for	O
decision	O
making	O
purposes	O
only	O
and	O
are	O
not	O
actualy	O
persisted	O
to	O
the	O
database	O
.	O

So	O
my	O
question	O
is	O
:	O
what	O
is	O
the	O
most	O
efficient	O
vehicle	O
to	O
pass	O
such	O
data	O
to	O
the	O
Oracle	B-Orgs
stored	O
proc	O
?	O

We	O
want	O
to	O
maintain	O
the	O
flexibilty	O
of	O
being	O
able	O
to	O
send	O
variable	O
parameter	O
sets	O
along	O
with	O
having	O
some	O
semblance	O
of	O
structure	O
around	O
the	O
data	O
.	O

Thanks	O
in	O
advance	O
.	O

Barry	O

Have	O
you	O
considered	O
passing	O
your	O
data	O
to	O
the	O
stored	O
procedure	O
as	O
XML	B-Stan
?	O

Oracle	B-Orgs
can	O
handle	O
XML	B-Stan
data	O
types	O
.	O

There	O
are	O
also	O
some	O
related	O
questions	O
on	O
Stack	O
Overflow	O
:	O

Java	B-PL
:	O
Oracle	B-Orgs
XMLType	O
+	O
JDBC	B-MISC

How	O
to	O
Oracle	B-Orgs
XMLTYPE	O
in	O
Hibernate	B-Fram

Using	O
MyBatis	B-API
with	O
Oracle	B-Orgs
XMLType	O
function	O
existsNode()	B-API

However	O
,	O
XML	B-Stan
may	O
be	O
a	O
performance	O
killer	O
in	O
some	O
situations	O
.	O

Another	O
option	O
is	O
to	O
use	O
REF	O
CURSOR	O
types	O
:	O

PreparedStatement	B-API
stmt	O
=	O
connection.prepareStatement	B-API
(	O

"	O
DECLARE	O
"	O

+	O
"	O
records	O
SYS_REFCURSOR	O
;	O
"	O

+	O
"	O
BEGIN	O
"	O

+	O
"	O
OPEN	O
records	O
FOR	O
"	O

+	O
"	O
SELECT	O
*	O
FROM	O
TABLE	O
(	O
?	O
);	O
"	O

+	O
"	O
my_proc	O
(	O
records	O
);	O
"	O

+	O
"	O
EN	O
D;	O
")	O
;	O

//	O
Set	O
the	O
records	O
as	O
an	O
array	O

stmt.setArray	B-API
(	O
1	O
,	O
records	O
);	O

That	O
would	O
be	O
a	O
way	O
to	O
somewhat	O
structure	O
the	O
data	O
and	O
yet	O
operate	O
on	O
weakly	O
typed	O
cursors	O
.	O

The	O
above	O
select	O
could	O
have	O
any	O
form	O
.	O

In	O
this	O
example	O
,	O
I'm	O
assuming	O
that	O
you	O
will	O
be	O
binding	O
something	O
like	O
this	O
:	O

CREATE	O
TYPE	O
rec	O
AS	O
OBJECT	O
(	O
ID	O
NUMBER	O
(	O
7	O
)	O
,	O
VALUE	O
CLOB	O
);	O

CREATE	O
TYPE	O
tab	O
AS	O
TABLE	O
OF	O
rec	O
;	O

A	O
simple	O
example	O
procedure	O
implementation	O
expecting	O
a	O
TABLE	O
OF	O
VARCHAR2	O
REF	O
CURSOR	O
:	O

CREATE	O
OR	O
REPLACE	O
PROCEDURE	O
my_proc	O
(	O
cur	O
IN	O
SYS_REFCURSOR	O
)	O
IS	O

--	O
Using	O
a	O
pre-existing	O
TABLE	O
TYPE	O
from	O
the	O
SYS	O
schema	O
for	O
the	O
example	O

array	O
ORA_MINING_VARCHAR2_NT	O
;	O

BEGIN	O

FETCH	O
cur	O
BULK	O
COLLECT	O
INTO	O
array	O
;	O

FOR	O
i	O
IN	O
array.FIRST	B-API
..	O
array.LAST	B-API

LOOP	O

DBMS_OUTPUT.PUT_LINE	O
(	O
array	O
(	O
i	O
));	O

END	O
LOOP	O
;	O

EN	O
D;	O

The	O
JDBC	B-MISC
binding	O
would	O
then	O
be	O

String	O
[]	O
strings	O
=	O
new	O
String	O
[]	O
{	O
"	O
a	O
"	O
,	O
"	O
b	O
"	O
,	O
"	O
c	B-PL
"	O
}	O
;	O

ArrayDescriptor	B-API
desc	O
=	O
new	O
ArrayDescriptor	B-API
(	O
"	O
ORA_MINING_VARCHAR2_NT	O
"	O
,	O
c	B-PL
);	O

ARRAY	O
array	O
=	O
new	O
ARRAY	O
(	O
desc	O
,	O
c	B-PL
,	O
strings	O
);	O

stmt.setArray	B-API
(	O
1	O
,	O
array	O
);	O

stmt.executeUpdate()	B-API
;	O

With	O
TABLE	O
OF	O
OBJECT	O
data	O
types	O
,	O
the	O
binding	O
is	O
a	O
bit	O
more	O
tricky	O
...	O
