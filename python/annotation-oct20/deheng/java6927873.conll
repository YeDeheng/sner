How	O
can	O
I	O
read	O
a	O
file	O
to	O
an	O
InputStream	B-API
then	O
write	O
it	O
into	O
an	O
OutputStream	B-API
in	O
Scala	O
?	O

I'm	O
trying	O
to	O
use	O
basic	O
Java	B-PL
code	O
in	O
Scala	O
to	O
read	O
from	O
a	O
file	O
and	O
write	O
to	O
an	O
OutputStream	B-API
,	O
but	O
when	O
I	O
use	O
the	O
usual	O
while	O
(	O
!	O
=	O
-1	O
)	O
in	O
Scala	O
gives	O
me	O
a	O
warning	O
"	O
comparing	O
types	O
of	O
Unit	O
and	O
Int	O
with	O
!	O

=	O
will	O
always	O
yield	O
true	O
"	O
.	O

The	O
code	O
is	O
as	O
follows	O
:	O
@codeSnippetRemoved	O

How	O
am	O
I	O
supposed	O
to	O
write	O
from	O
an	O
input	O
stream	O
to	O
an	O
output	O
stream	O
in	O
Scala	O
?	O

I'm	O
mostly	O
interested	O
in	O
a	O
Scala-like	O
solution	O
.	O

Assignment	O
statements	O
always	O
return	O
Unit	O
in	O
Scala	O
,	O
so	O
read	O
=	O
input.read	B-API
returns	O
Unit	O
,	O
which	O
never	O
equals	O
-1	O
.	O

You	O
can	O
do	O
it	O
like	O
this	O
:	O
@codeSnippetRemoved	O

You	O
could	O
do	O
this	O
:	O
@codeSnippetRemoved	O

def	O
stream	O
(	O
inputStream	O
:	O
InputStream	B-API
,	O
outputStream	O
:	O
OutputStream	B-API
)	O
={	O
val	O
buffer	O
=	O
new	O
Array[Byte]	O
(	O
16384	O
)	O

def	O
doStream	O
(	O
total	O
:	O
Int	O
=	O
0	O
):	O
Int	O
=	O
{	O
val	O
n	O
=	O
inputStream.read	B-API
(	O
buffer	O
)	O
if	O
(	O
n	O
==	O
-1	O
)	O
total	O
else	O
{	O
outputStream.write	B-API
(	O
buffer	O
,	O
0	O
,	O
n	O
)	O
doStream	O
(	O
total	O
+	O
n	O
)	O
}	O
}	O

doStream()	B-API
}	O

If	O
this	O
is	O
slow	O
:	O
@codeSnippetRemoved	O

you	O
can	O
expand	O
it	O
:	O
@codeSnippetRemoved	O
