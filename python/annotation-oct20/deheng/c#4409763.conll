How	O
to	O
convert	O
from	O
RGB555	O
to	O
RGB888	O
in	O
c#	B-PL
?	O

I	O
need	O
to	O
convert	O
16-bit	O
XRGB1555	O
into	O
24-bit	O
RGB888	O
.	O

My	O
function	O
for	O
this	O
is	O
below	O
,	O
but	O
it	O
'	O
s	O
not	O
perfect	O
,	O
i.e.	O
a	O
value	O
of	O
0b11111	O
wil	O
give	O
248	O
as	O
the	O
pixel	O
value	O
,	O
not	O
255	O
.	O

This	O
function	O
is	O
for	O
little-endian	O
,	O
but	O
can	O
easily	O
be	O
modified	O
for	O
big-endian	O
.	O

@codeSnippetRemoved	O

Any	O
ideas	O
how	O
to	O
make	O
it	O
work	O
?	O

Start	O
by	O
writing	O
some	O
tests	O
:	O
@codeSnippetRemoved	O

The	O
rest	B-Stan
will	O
follow	O
!	O

You	O
would	O
normally	O
copy	O
the	O
highest	O
bits	O
down	O
to	O
the	O
bottom	O
bits	O
,	O
so	O
if	O
you	O
had	O
five	O
bits	O
as	O
follows	O
:	O
@codeSnippetRemoved	O

You	O
would	O
extend	O
that	O
to	O
eight	O
bits	O
as	O
:	O
@codeSnippetRemoved	O

That	O
way	O
,	O
all	O
zeros	O
remains	O
all	O
zeros	O
,	O
all	O
ones	O
becomes	O
all	O
ones	O
,	O
and	O
values	O
in	O
between	O
scale	O
appropriately	O
.	O

(	O
Note	O
that	O
A	O
,	O
B	O
,	O
C	B-PL
etc	O
aren't	O
supposed	O
to	O
be	O
hex	O
digits	O
-	O
they	O
are	O
variables	O
representing	O
a	O
single	O
bit	O
)	O
.	O

I'd	O
go	O
with	O
a	O
lookup	O
table	O
.	O

Since	O
there	O
are	O
only	O
32	O
different	O
values	O
it	O
even	O
fits	O
in	O
a	O
cache-line	O
.	O

You	O
can	O
get	O
the	O
8	O
bit	O
value	O
from	O
the	O
5	O
bit	O
value	O
with	O
:	O
return	O
(	O
x	O
3	O
)	O
||	O
(	O
x	O
2	O
);	O

The	O
rounding	O
might	O
not	O
be	O
perfect	O
though	O
.	O

I.e.	O
the	O
result	O
isn't	O
always	O
closest	O
to	O
the	O
input	O
,	O
but	O
it	O
never	O
is	O
further	O
away	O
that	O
1	O
/	O
255	O
.	O
