How	O
do	O
'	O
and	O
'	O
and	O
'	O
or	O
'	O
act	O
with	O
non-boolean	O
values	O
in	O
Python	B-PL
?	O

22	O
and	O
333	O
/	O
12	O
or	O
1	O

I	O
have	O
encountered	O
the	O
above	O
line	O
of	O
code	O
.	O

The	O
result	O
is	O
27	O
,	O
but	O
I	O
could	O
not	O
quite	O
understand	O
what	O
does	O
and	O
and	O
or	O
mean	O
in	O
this	O
case	O
.	O

Can	O
somebody	O
explain	O
to	O
me	O
,	O
preferred	O
with	O
examples	O
.	O

Thanks	O
in	O
advance	O
!!	O

A	O
and	O
B	O
returns	O
A	O
if	O
A	O
is	O
false	O
,	O
or	O
B	O
otherwise	O
:	O
@codeSnippetRemoved	O

Similarly	O
,	O
'	O
A	O
or	O
B	O
'	O
returns	O
A	O
if	O
A	O
is	O
true	O
,	O
or	O
B	O
otherwise	O
:	O
@codeSnippetRemoved	O

Let	O
'	O
s	O
separate	O
this	O
out	O
:	O
@codeSnippetRemoved	O

The	O
logical	O
operands	O
and	O
,	O
or	O
will	O
come	O
after	O
division	O
operator	O
in	O
this	O
particular	O
scenario	O
as	O
per	O
the	O
rules	O
of	O
precedence	O
.	O

First	O
it	O
will	O
calculate	O
333	O
/	O
12	O
which	O
is	O
27	O
and	O
then	O
it	O
will	O
become	O
22	O
and	O
27	O
or	O
1	O
which	O
is	O
equivalent	O
to	O
27	O
as	O
and	O
,	O
or	O
have	O
equal	O
precedences	O
.	O

@codeSnippetRemoved	O

But	O
in	O
case	O
of	O
Python	B-PL
3.2	O
it	O
'	O
s	O
computing	O
to	O
27.75	O
.	O

@codeSnippetRemoved	O

This	O
is	O
the	O
"	O
and-or	O
trick	O
"	O
--	O
and	O
and	O
or	O
don't	O
actually	O
return	O
boolean	O
values	O
;	O
instead	O
,	O
they	O
return	O
one	O
of	O
their	O
input	O
arguments	O
.	O

People	O
used	O
to	O
use	O
this	O
for	O
control-flow	O
.	O

As	O
of	O
python	B-PL
2.5	O
,	O
it	O
'	O
s	O
not	O
necessary	O
anymore	O
,	O
because	O
conditional	O
expressions	O
were	O
introduced	O
.	O

@codeSnippetRemoved	O

is	O
equivalent	O
to	O
@codeSnippetRemoved	O

In	O
Python	B-PL
,	O
nonzero	O
numbers	O
are	O
counted	O
as	O
true	O
for	O
the	O
purposes	O
of	O
boolean	O
expressions	O
,	O
and	O
zero	O
is	O
counted	O
as	O
false	O
.	O

So	O
even	O
though	O
both	O
and	O
and	O
or	O
are	O
normally	O
used	O
with	O
the	O
booleans	O
True	O
and	O
False	O
,	O
they	O
can	O
be	O
used	O
with	O
numbers	O
too	O
.	O

The	O
issue	O
is	O
:	O
what	O
is	O
the	O
value	O
of	O
an	O
expression	O
like	O
10	O
and	O
3	O
,	O
where	O
both	O
of	O
the	O
values	O
evaluate	O
to	O
true	O
?	O

In	O
C	B-PL
,	O
which	O
has	O
similar	O
integer-as-boolean	O
semantics	O
,	O
the	O
value	O
of	O
10	O
3	O
is	O
1	O
,	O
the	O
most	O
commonly	O
used	O
true	O
value	O
.	O

However	O
,	O
in	O
Python	B-PL
the	O
value	O
of	O
this	O
expression	O
is	O
3	O
,	O
the	O
second	O
half	O
of	O
the	O
and	O
expression	O
.	O

This	O
makes	O
sense	O
because	O
and	O
short-circuits	O
,	O
meaning	O
that	O
0	O
and	O
3	O
is	O
0	O
,	O
so	O
and	O
has	O
"	O
take	O
the	O
first	O
value	O
if	O
it	O
'	O
s	O
false	O
,	O
the	O
second	O
otherwise	O
"	O
semantics	O
.	O

What	O
about	O
the	O
expression	O
you	O
posted	O
?	O

By	O
operator	O
precedence	O
,	O
it	O
'	O
s	O
the	O
same	O
as	O
@codeSnippetRemoved	O

The	O
value	O
of	O
22	O
and	O
333	O
/	O
12	O
is	O
333	O
/	O
12	O
,	O
which	O
is	O
27	O
.	O

Since	O
the	O
or	O
operator	O
short-circuits	O
,	O
the	O
Python	B-PL
interpreter	O
takes	O
the	O
first	O
true	O
value	O
when	O
evaluating	O
27	O
or	O
1	O
,	O
and	O
gets	O
27	O
.	O
