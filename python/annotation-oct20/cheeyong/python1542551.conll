binding	O
local	O
variables	O
in	O
python	B-PL

I	O
wonder	O
if	O
there	O
is	O
a	O
good	O
way	O
to	O
bind	O
local	O
variables	O
in	O
python	B-PL
.	O

Most	O
of	O
my	O
work	O
involves	O
cobbling	O
together	O
short	O
data	O
or	O
text	O
processing	O
scripts	O
with	O
a	O
series	O
of	O
expressions	O
(	O
when	O
python	B-PL
permits	O
)	O
,	O
so	O
defining	O
object	O
classes	O
(	O
to	O
use	O
as	O
namespaces	O
)	O
and	O
instantiating	O
them	O
seems	O
a	O
bit	O
much	O
.	O

So	O
what	O
I	O
had	O
in	O
mind	O
was	O
something	O
like	O
in	O
(	O
common	O
)	O
lisp	O
,	O
where	O
you	O
could	O
do	O
something	O
like	O
@codeSnippetRemoved	O

In	O
python	B-PL
,	O
the	O
best	O
I	O
could	O
come	O
up	O
with	O
is	O
@codeSnippetRemoved	O

These	O
are	O
,	O
of	O
course	O
,	O
very	O
simple	O
examples	O
but	O
might	O
there	O
be	O
something	O
that	O
is	O
as	O
scalable	O
as	O
let	O
or	O
let	O
*	O
in	O
lisp	O
?	O

Are	O
defining	O
classes	O
the	O
best	O
way	O
to	O
go	O
to	O
create	O
a	O
local	O
namespace	O
?...	O

(	O
but	O
feels	O
a	O
little	O
less	O
interactive	O
that	O
way	O
)	O

Edit	O
:	O
So	O
to	O
further	O
explain	O
the	O
intention	O
(	O
my	O
apologies	O
for	O
vagueness	O
)	O
,	O
I	O
want	O
to	O
reduce	O
the	O
use	O
of	O
global	O
variables	O
.	O

So	O
in	O
the	O
case	O
above	O
,	O
I	O
meant	O
to	O
use	O
the	O
extraction	O
operator	O
as	O
a	O
general	O
case	O
of	O
any	O
type	O
of	O
operation	O
that	O
might	O
not	O
want	O
to	O
be	O
repeated	O
.	O

For	O
instance	O
,	O
one	O
might	O
write	O
either	O
@codeSnippetRemoved	O

or	O
@codeSnippetRemoved	O

to	O
accomplish	O
the	O
same	O
result	O
.	O

In	O
essence	O
,	O
if	O
the	O
desired	O
operation	O
on	O
'	O
data	O
'	O
is	O
more	O
complicated	O
then	O
getting	O
the	O
second	O
item	O
,	O
I	O
wouldn't	O
want	O
to	O
type	O
it	O
out	O
multiple	O
times	O
,	O
or	O
let	O
the	O
computer	O
compute	O
the	O
value	O
of	O
the	O
same	O
expression	O
more	O
times	O
than	O
necessary	O
.	O

So	O
in	O
most	O
cases	O
one	O
would	O
assign	O
the	O
result	O
of	O
the	O
operation	O
,	O
in	O
this	O
case	O
,	O
data[2]	O
,	O
or	O
operator.itemgetter	B-API
(	O
2	O
)	O
(	O
data	O
)	O
,	O
to	O
some	O
variable	O
in	O
the	O
global	O
space	O
,	O
but	O
I	O
have	O
an	O
aversion	O
to	O
leaving	O
variables	O
around	O
in	O
the	O
global	O
space	O
if	O
they	O
were	O
only	O
necessary	O
to	O
store	O
intermediate	O
values	O
in	O
a	O
computation	O
...	O
hence	O
the	O
use	O
of	O
the	O
'	O
del	O
'	O
command	O
immediately	O
afterwards	O
.	O

Defining	O
a	O
local	O
environment	O
or	O
namespace	O
and	O
binding	O
intermediate	O
results	O
to	O
local	O
variables	O
would	O
be	O
an	O
ideal	O
alternative	O
.	O

Not	O
really	O
knowing	O
Lisp	O
,	O
I	O
can't	O
see	O
what	O
you're	O
trying	O
to	O
do	O
here	O
.	O

But	O
I	O
would	O
say	O
that	O
in	O
general	O
you	O
should	O
not	O
try	O
to	O
write	O
Python	B-PL
as	O
if	O
it	O
were	O
Lisp	O
,	O
or	O
indeed	O
any	O
language	O
as	O
if	O
it	O
were	O
any	O
other	O
language	O
.	O

I've	O
been	O
programming	O
in	O
Python	B-PL
for	O
five	O
years	O
and	O
I've	O
never	O
seen	O
a	O
need	O
to	O
do	O
what	O
you're	O
trying	O
above	O
.	O

Can	O
you	O
give	O
an	O
example	O
of	O
a	O
use	O
case	O
for	O
the	O
above	O
-	O
what	O
are	O
you	O
actually	O
trying	O
to	O
do	O
,	O
in	O
terms	O
of	O
the	O
end	O
result	O
?	O

Maybe	O
then	O
we	O
can	O
advise	O
you	O
on	O
the	O
best	O
way	O
to	O
do	O
it	O
in	O
Python	B-PL
,	O
rather	O
than	O
Lisp	O
.	O

It	O
'	O
s	O
a	O
bit	O
unclear	O
what	O
you	O
are	O
asking	O
,	O
bit	O
I'll	O
try	O
to	O
answer	O
anyway	O
:	O

You	O
bind	O
variables	O
to	O
names	O
with	O
=	O
in	O
Python	B-PL
.	O

So	O
your	O
data	O
=	O
[	O
1	O
,	O
2	O
,	O
3	O
]	O
binds	O
the	O
list	O
[	O
1	O
,	O
2	O
,	O
3	O
]	O
to	O
the	O
name	O
data	O
.	O

You	O
can	O
create	O
local	O
namespaces	O
with	O
classes	O
and	O
functions	O
/	O
methods	O
.	O

The	O
closest	O
you	O
get	O
so	O
something	O
as	O
powerful	O
as	O
let	O
is	O
probably	O
def	O
and	O
lambda	O
.	O

Python	B-PL
is	O
(	O
despite	O
where	O
some	O
people	O
try	O
to	O
tell	O
you	O
)	O
not	O
Lisp	O
,	O
and	O
not	O
particularly	O
functional	O
,	O
so	O
you	O
will	O
have	O
to	O
adapt	O
your	O
mindset	O
a	O
bit	O
.	O

Update	O
:	O
Ah	O
,	O
I	O
see	O
what	O
you	O
mean	O
now	O
.	O

All	O
variables	O
are	O
pretty	O
much	O
local	O
in	O
Python	B-PL
.	O

The	O
nearest	O
you	O
get	O
to	O
global	O
variables	O
are	O
variables	O
defined	O
in	O
module	O
space	O
,	O
because	O
you	O
can	O
access	O
them	O
with	O
from	O
module	O
import	O
variable	O
.	O

You	O
also	O
can	O
access	O
them	O
from	O
wherever	O
in	O
the	O
module	O
,	O
but	O
not	O
modify	O
them	O
(	O
unless	O
you	O
say	O
that	O
you	O
want	O
to	O
modify	O
them	O
with	O
the	O
global	O
keyword	O
.	O

Anything	O
you	O
define	O
in	O
a	O
function	O
/	O
method	O
or	O
class	O
definition	O
,	O
will	O
only	O
be	O
accessible	O
from	O
that	O
namespace	O
.	O

So	O
in	O
short	O
:	O
you	O
don't	O
have	O
to	O
worry	O
about	O
the	O
things	O
you	O
worry	O
about	O
now	O
.	O

Python	B-PL
takes	O
care	O
of	O
it	O
for	O
you	O
.	O

:)	O

I	O
can	O
only	O
second	O
Lennart	O
and	O
Daniel	O
-	O
Python	B-PL
is	O
not	O
Lisp	O
,	O
and	O
trying	O
to	O
write	O
language	O
X	O
into	O
language	O
Y	O
is	O
usually	O
inefficient	O
and	O
frustrating	O
at	O
best	O
.	O

First	O
point	O
:	O
your	O
example	O
code	O
@codeSnippetRemoved	O

would	O
be	O
much	O
more	O
readable	O
as	O
:	O
@codeSnippetRemoved	O

but	O
anyway	O
,	O
in	O
this	O
concrete	O
case	O
,	O
using	O
a	O
lambda	O
is	O
total	O
overkill	O
,	O
overcomplexificated	O
,	O
and	O
mostly	O
inefficient	O
.	O

A	O
braindead	O
@codeSnippetRemoved	O

would	O
JustWork	B-API
(	O
tm	O
)	O
!	O

-	O
)	O

Now	O
wrt	O
to	O
local	O
bindings	O
/	O
namespaces	O
,	O
the	O
usual	O
solution	O
is	O
to	O
use	O
...	O
functions	O
-	O
eventually	O
nested	O
.	O

While	O
100%	O
object	O
(	O
as	O
in	O
"	O
everything	O
is	O
an	O
object	O
")	O
,	O
Python	B-PL
is	O
not	O
pure	O
object	O
,	O
and	O
plain	O
functions	O
are	O
just	O
fine	O
.	O

FWIW	O
,	O
even	O
for	O
"	O
scripts	O
"	O
,	O
you	O
should	O
put	O
your	O
logic	O
in	O
a	O
function	O
then	O
call	O
it	O
-	O
function	O
'	O
s	O
local	O
namespace	O
access	O
is	O
faster	O
than	O
"	O
global	O
"	O
(	O
really	O
:	O
module	O
level	O
)	O
namespace	O
access	O
.	O

The	O
canonical	O
pattern	O
is	O
@codeSnippetRemoved	O

Note	O
also	O
that	O
nested	O
functions	O
can	O
also	O
access	O
the	O
enclosing	O
namespace	O
,	O
ie	O
@codeSnippetRemoved	O

HTH	O

You	O
could	O
combine	O
a	O
function	O
decorator	O
and	O
default	O
parameters	O
to	O
get	O
something	O
like	O
let	O
and	O
block	O
scoped	O
variables	O
:	O
@codeSnippetRemoved	O

But	O
this	O
isn't	O
a	O
popular	O
idiom	O
in	O
Python	B-PL
so	O
I	O
advise	O
you	O
avoid	O
it	O
to	O
make	O
your	O
code	O
easier	O
to	O
understand	O
for	O
others	O
.	O

Just	O
use	O
regular	O
local	O
variables	O
:	O
@codeSnippetRemoved	O

If	O
this	O
becomes	O
a	O
real	O
problem	O
it	O
'	O
s	O
a	O
good	O
sign	O
you	O
are	O
trying	O
to	O
do	O
too	O
much	O
in	O
a	O
single	O
function	O
.	O
