Recursion	O
with	O
Tasks	O
and	O
WaitAll	B-API

Basically	O
here	O
is	O
the	O
problem	O
,	O
I	O
have	O
a	O
function	O
"	O
GetAllCandidates	B-API
"	O
that	O
accepts	O
a	O
list	O
,	O
calculates	O
something	O
,	O
alters	O
the	O
parameters	O
and	O
calls	O
itself	O
using	O
Task.Factory.StartNew	B-API
to	O
calculate	O
all	O
possible	O
outputs	O
with	O
different	O
morphs	O
of	O
the	O
original	O
array	O
.	O

@codeSnippetRemoved	O

I	O
need	O
to	O
fully	O
utilize	O
the	O
cores	O
on	O
my	O
CPU	O
and	O
wait	O
for	O
all	O
tasks	O
to	O
finish	O
,	O
and	O
here	O
is	O
the	O
problem	O
.	O

If	O
I	O
call	O
.Wait()	O
for	O
the	O
task	O
,	O
my	O
cores	O
don't	O
get	O
utilized	O
(	O
CPU	O
usage	O
is	O
very	O
low	O
)	O
,	O
therefore	O
the	O
calculations	O
don't	O
finish	O
quickly	O
.	O

Creating	O
a	O
global	O
list	O
for	O
tasks	O
and	O
then	O
calling	O
WaitAll	B-API
doesn't	O
work	O
because	O
its	O
a	O
random	O
recursive	O
calls	O
,	O
the	O
list	O
of	O
tasks	O
isn't	O
fully	O
populated	O
when	O
my	O
program	O
reaches	O
the	O
call	O
for	O
WaitAll()	B-API
,	O
and	O
also	O
since	O
the	O
calculations	O
are	O
huge	O
,	O
I	O
get	O
an	O
OutOfMemoryException	B-API
when	O
I	O
try	O
add	O
my	O
tasks	O
to	O
a	O
global	O
task	O
list	O
.	O

any	O
hints	O
,	O
on	O
how	O
to	O
proceed	O
with	O
such	O
a	O
problem	O
?	O

It	O
sounds	O
like	O
your	O
goal	O
is	O
to	O
increase	O
the	O
performance	O
of	O
the	O
entire	O
process	O
.	O

Assuming	O
that	O
the	O
order	O
in	O
which	O
the	O
for-loop	O
is	O
executed	O
is	O
not	O
important	O
,	O
you	O
can	O
use	O
TPL	O
.	O

It	O
would	O
get	O
you	O
a	O
faster	O
result	O
I	O
think	O
.	O

@codeSnippetRemoved	O

Update	O
:	O
Use	O
PLINQ	O
to	O
maintain	O
order	O

I	O
have	O
provided	O
an	O
example	O
that	O
uses	O
PLINQ	O
to	O
run	O
the	O
operations	O
in	O
parallel	O
and	O
then	O
return	O
the	O
result	O
set	O
in	O
their	O
original	O
order	O
.	O

Unless	O
these	O
operations	O
are	O
expensive	O
,	O
or	O
there	O
are	O
a	O
large	O
number	O
of	O
them	O
,	O
you	O
might	O
not	O
find	O
a	O
big	O
performance	O
increase	O
.	O

If	O
you	O
are	O
doing	O
some	O
heavy	O
loaded	O
work	O
,	O
or	O
have	O
a	O
large	O
quantity	O
of	O
items	O
to	O
run	O
through	O
,	O
then	O
this	O
should	O
help	O
you	O
out	O
.	O

@codeSnippetRemoved	O

Make	O
GetAllCandidates	B-API
keep	O
a	O
function-local	O
list	O
of	O
tasks	O
started	O
.	O

At	O
the	O
end	O
of	O
the	O
function	O
wait	O
for	O
them	O
.	O

This	O
still	O
provides	O
parallelism	O
as	O
long	O
as	O
you	O
start	O
more	O
than	O
1	O
task	O
.	O

You	O
can	O
use	O
the	O
Task.WhenAll	B-API
method	O
(	O
introduced	O
in	O
.NET	B-Fram
4.5	O
)	O
to	O
unravel	O
the	O
parallelism	O
at	O
each	O
step	O
of	O
your	O
recursion	O
:	O
@codeSnippetRemoved	O

This	O
way	O
,	O
you	O
would	O
only	O
need	O
to	O
wait	O
on	O
the	O
outermost	O
call	O
of	O
your	O
GetAllCandidates	B-API
method	O
within	O
your	O
application	O
(	O
if	O
at	O
all	O
)	O
,	O
blocking	O
just	O
one	O
thread	O
.	O

Edit	O
:	O
Equivalent	O
formulation	O
of	O
for	O
loop	O
using	O
LINQ	B-Fram
:	O
@codeSnippetRemoved	O
