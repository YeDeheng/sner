Converting	O
repetative	O
javascript	B-PL
statements	O
to	O
arrays	O
in	O
loops	O

I	O
am	O
dynamically	O
changing	O
the	O
options	O
in	O
8	O
selects	O
based	O
on	O
a	O
separate	O
selected	O
option.The	B-API
process	O
handles	O
counties	O
in	O
a	O
state	O
and	O
updating	O
all	O
8	O
selects	O
for	O
each	O
county	O
in	O
a	O
state	O
is	O
terribly	O
repetitive	O
as	O
each	O
option	O
can	O
only	O
exist	O
in	O
one	O
select	O
.	O

My	O
original	O
code	O
was	O
thrown	O
together	O
quickly	O
but	O
worked	O
fine	O
:	O
@codeSnippetRemoved	O

I	O
tried	O
condensing	O
it	O
into	O
a	O
series	O
of	O
arrays	O
and	O
for	O
loops	O
,	O
which	O
really	O
shortens	O
the	O
code	O
,	O
but	O
it	O
breaks	O
the	O
page	O
(	O
an	O
infinite	O
loop	O
somewhere	O
I'm	O
sure	O
)	O
.	O

New	O
code	O
(	O
does	O
not	O
work	O
):	O
@codeSnippetRemoved	O

Am	O
I	O
missing	O
something	O
?	O

This	O
should	O
execute	O
quicker	O
right	O
?	O

Instead	O
its	O
holding	O
the	O
page	O
from	O
loading	O
indefinitely	O
.	O

Edit	O
:	O
I	O
did	O
find	O
one	O
glaring	O
problem	O
.	O

The	O
dropdowns[i]	O
.appendChild	O
(	O
options[i	O
]);	O
loop	O
should	O
not	O
be	O
in	O
the	O
loop	O
above	O
it	O
.	O

It	O
should	O
run	O
after	O
options	O
has	O
been	O
set	O
.	O

New	O
snippet	O
:	O
@codeSnippetRemoved	O

Edit	O
2	O
:	O

I	O
ran	O
into	O
a	O
problem	O
when	O
taking	O
a	O
step	O
back.It	B-API
stems	O
from	O
using	O
the	O
array	O
of	O
options	O
in	O
a	O
loop	O
.	O

I	O
knew	O
each	O
option	O
element	O
could	O
only	O
exist	O
in	O
a	O
select	O
once	O
,	O
but	O
didn't	O
follow	O
that	O
logic	O
when	O
writing	O
the	O
loop	O
.	O

The	O
same	O
option	O
element	O
(	O
options[i	O
]	O
)	O
is	O
being	O
changed	O
and	O
reused	O
in	O
each	O
iteration	O
,	O
which	O
wont	O
work	O
,	O
you	O
only	O
get	O
the	O
last	O
iteration	O
'	O
s	O
results	O
.	O

I	O
believe	O
this	O
worked	O
in	O
the	O
old	O
code	O
because	O
it	O
redefined	O
the	O
element	O
in	O
each	O
iteration	O
,	O
not	O
just	O
changed	O
it	O
'	O
s	O
attributes	O

Does	O
this	O
rule	O
an	O
array	O
out	O
for	O
this	O
use	O
?	O

That	O
'	O
s	O
not	O
how	O
you	O
add	O
elements	O
to	O
an	O
array	O
@codeSnippetRemoved	O

should	O
be	O
@codeSnippetRemoved	O

which	O
you	O
would	O
then	O
access	O
like	O
so	O
@codeSnippetRemoved	O

you	O
may	O
want	O
to	O
use	O
an	O
object	O
instead	O
(	O
note	O
the	O
difference	O
[]	O
becomes	O
{}	O
)	O
@codeSnippetRemoved	O

which	O
you	O
can	O
then	O
access	O
like	O
so	O
@codeSnippetRemoved	O

As	O
I	O
noted	O
in	O
the	O
comments	O
above	O
,	O
when	O
adding	O
the	O
options	O
to	O
the	O
select	O
,	O
I	O
cannot	O
use	O
an	O
array	O
.	O

II	O
ended	O
up	O
using	O
a	O
two	O
dimensional	O
array	O
for	O
the	O
counties	O
,	O
and	O
a	O
second	O
array	O
for	O
the	O
state	O
codes	O
that	O
my	O
php	B-PL
script	O
submits	O
to	O
the	O
form	O
.	O

I	O
realize	O
that	O
the	O
arrays	O
would	O
be	O
better	O
defined	O
as	O
objects	O
,	O
but	O
the	O
deadline	O
for	O
the	O
project	O
is	O
up	O
and	O
this	O
code	O
is	O
efficient	O
enough	O
for	O
production	O
use	O
.	O

Here	O
is	O
a	O
condensed	O
version	O
of	O
my	O
final	O
code	O
(	O
until	O
things	O
slow	O
down	O
and	O
I	O
find	O
time	O
to	O
revisit	O
the	O
code	O
):	O
@codeSnippetRemoved	O

Thank	O
you	O
all	O
for	O
your	O
support	O
.	O

I	O
am	O
definitely	O
open	O
to	O
suggestions	O
for	O
further	O
optimizations	O
,	O
as	O
the	O
code	O
is	O
still	O
31	O
KB	O
due	O
to	O
the	O
size	O
of	O
the	O
arrays	O
.	O
