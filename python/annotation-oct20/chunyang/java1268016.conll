What	O
is	O
synchronized	O
statement	O
used	O
for	O
?	O

What	O
is	O
the	O
usage	O
of	O
synchronized	O
statements	O
?	O

Only	O
1	O
thread	O
at	O
a	O
time	O
can	O
access	O
a	O
synchronized	O
block	O
.	O

This	O
is	O
a	O
basic	O
language	O
construct	O
.	O

If	O
you're	O
not	O
at	O
all	O
familiar	O
with	O
it	O
you'll	O
need	O
to	O
review	O
.	O

It	O
is	O
a	O
java	B-PL
built	O
in	O
form	O
of	O
mutual	O
exclusion	O
.	O

This	O
is	O
used	O
for	O
multithreaded	O
applications	O
.	O

Sun	O
concurrency	O
tutorial	O

This	O
has	O
a	O
section	O
about	O
synchronized	O
,	O
but	O
you	O
should	O
read	O
the	O
whole	O
thing	O
if	O
you	O
are	O
trying	O
to	O
use	O
multithreaded	O
applications	O
.	O

Wiki	O
mutex	O

These	O
are	O
used	O
for	O
when	O
you	O
are	O
building	O
a	O
program	O
with	O
many	O
"	O
threads	O
"	O
.	O

When	O
main	O
starts	O
,	O
it	O
starts	O
with	O
one	O
thread	O
,	O
which	O
executes	O
the	O
steps	O
in	O
a	O
sequence	O
.	O

You	O
can	O
start	O
many	O
more	O
threads	O
,	O
which	O
can	O
then	O
execute	O
code	O
at	O
the	O
same	O
time	O
.	O

If	O
you're	O
executing	O
the	O
same	O
code	O
at	O
the	O
same	O
time	O
,	O
things	O
might	O
get	O
messed	O
up	O
:	O
@codeSnippetRemoved	O

What	O
you	O
want	O
to	O
do	O
is	O
put	O
a	O
'	O
lock	O
'	O
over	O
this	O
block	O
of	O
code	O
,	O
to	O
make	O
sure	O
that	O
no	O
(	O
other	O
)	O
'	O
thread	O
'	O
can	O
start	O
executing	O
it	O
unless	O
it	O
is	O
"	O
synchronized	O
on	O
"	O
the	O
variable	O
y	O
.	O

@codeSnippetRemoved	O

Now	O
,	O
all	O
other	O
threads	O
have	O
to	O
wait	O
for	O
whichever	O
thread	O
got	O
there	O
first	O
to	O
finish	O
,	O
at	O
which	O
point	O
another	O
thread	O
grabs	O
the	O
lock	O
,	O
enters	O
the	O
block	O
of	O
code	O
,	O
executes	O
it	O
,	O
and	O
releases	O
the	O
lock	O
.	O

By	O
the	O
way	O
,	O
a	O
has	O
to	O
be	O
an	O
object	O
(	O
Integer	O
)	O
,	O
not	O
a	O
primitive	O
type	O
.	O

You	O
can	O
also	O
add	O
'	O
synchronized	O
'	O
to	O
methods	O
(	O
which	O
synchronizes	O
on	O
'	O
this	O
'	O
,	O
that	O
is	O
the	O
object	O
)	O
,	O
or	O
to	O
classes	O
(	O
which	O
synchronizes	O
all	O
methods	O
of	O
that	O
class	O
)	O
.	O

Writing	O
multi-threaded	O
code	O
is	O
hard	O
,	O
because	O
of	O
problems	O
like	O
this	O
.	O

Synchronization	O
is	O
one	O
tool	O
,	O
though	O
it	O
has	O
one	O
major	O
problem	O
-	O
deadlocks	O
.	O

You	O
should	O
look	O
this	O
up	O
.	O

It	O
creates	O
a	O
section	O
of	O
code	O
which	O
,	O
with	O
respect	O
to	O
two	O
or	O
more	O
threads	O
,	O
can	O
(	O
a	O
)	O
only	O
be	O
executed	O
by	O
one	O
thread	O
at	O
a	O
time	O
,	O
and	O
(	O
b	O
)	O
forms	O
a	O
memory	O
barrier	O
.	O

While	O
understanding	O
the	O
concept	O
of	O
mutual-exclusion	O
preventing	O
concurrent	O
execution	O
of	O
the	O
code	O
is	O
quite	O
easy	O
,	O
equally	O
important	O
is	O
the	O
memory	O
barrier	O
.	O

A	O
memory	O
barrier	O
forms	O
a	O
"	O
happens	O
before	O
"	O
relationship	O
between	O
two	O
threads	O
.	O

Any	O
changes	O
to	O
memory	O
made	O
by	O
a	O
thread	O
before	O
acquiring	O
a	O
lock	O
is	O
guaranteed	O
to	O
be	O
observed	O
by	O
another	O
thread	O
after	O
it	O
acquires	O
the	O
same	O
lock	O
.	O

Due	O
to	O
the	O
effects	O
of	O
CPU	O
caches	O
and	O
their	O
interaction	O
with	O
main	O
memory	O
,	O
this	O
is	O
critical	O
to	O
preventing	O
observation	O
and	O
update	O
of	O
stale	O
cached	O
memory	O
and	O
preventing	O
race	O
conditions	O
between	O
threads	O
.	O
