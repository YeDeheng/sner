Messenger	O
to	O
Remote	O
Service	O
Causing	O
Memory	O
Leak	O

I	O
have	O
an	O
application	O
that	O
communicates	O
with	O
a	O
Service	O
in	O
a	O
remote	O
process	O
using	O
the	O
Messenger	O
interface	O
.	O

Here	O
is	O
the	O
basic	O
architecture	O
of	O
how	O
things	O
are	O
set	O
up	O
:	O

The	O
application	O
generates	O
several	O
"	O
Operation	O
"	O
objects	O
that	O
require	O
access	O
to	O
the	O
service	O
.	O

Each	O
"	O
Operation	O
"	O
contains	O
a	O
Handler	O
wrapped	O
in	O
a	O
Messenger	O
used	O
to	O
receive	O
the	O
response	O
data	O
back	O
from	O
the	O
Service	O
When	O
the	O
operation	O
executes	O
,	O
it	O
wraps	O
its	O
Messenger	O
into	O
an	O
Intent	O
and	O
calls	O
startService()	B-API
to	O
pass	O
the	O
message	O
to	O
the	O
remote	O
service	O
The	O
remote	O
service	O
does	O
some	O
work	O
based	O
on	O
the	O
parameters	O
of	O
the	O
Intent	O
and	O
then	O
returns	O
the	O
response	O
by	O
sending	O
a	O
Message	O
to	O
the	O
Messenger	O
for	O
that	O
operation	O
.	O

Here	O
is	O
the	O
basic	O
code	O
present	O
in	O
the	O
operation	O
:	O
@codeSnippetRemoved	O

And	O
a	O
snippet	O
of	O
how	O
the	O
Service	O
is	O
structured	O
(	O
it	O
'	O
s	O
basically	O
an	O
IntentService	B-API
that	O
doesn't	O
shut	O
down	O
when	O
the	O
queue	O
is	O
empty	O
):	O
@codeSnippetRemoved	O

This	O
all	O
works	O
fantastically	O
well	O
.	O

I	O
can	O
send	O
tons	O
of	O
operations	O
from	O
several	O
different	O
applications	O
to	O
the	O
same	O
service	O
and	O
they	O
all	O
process	O
and	O
send	O
their	O
response	O
to	O
just	O
the	O
right	O
place	O
.	O

However	O
...	O

I	O
noticed	O
that	O
if	O
the	O
application	O
ran	O
long	O
enough	O
and	O
with	O
enough	O
activity	O
it	O
would	O
crash	O
with	O
an	O
OutOfMemoryError	B-API
.	O

Upon	O
looking	O
at	O
the	O
HPROF	O
data	O
in	O
MAT	O
,	O
I	O
noticed	O
that	O
all	O
these	O
operations	O
where	O
staying	O
in	O
memory	O
,	O
and	O
they	O
were	O
held	O
hostage	O
from	O
the	O
Garbage	O
Collector	O
because	O
of	O
the	O
Messenger	O
.	O

Apparently	O
,	O
the	O
Messenger	O
instance	O
is	O
creating	O
a	O
long-term	O
native	O
connection	O
to	O
Binder	O
that	O
counts	O
as	O
a	O
GC	O
Root	O
,	O
which	O
is	O
keeping	O
each	O
"	O
Operation	O
"	O
object	O
in	O
memory	O
indefinitely	O
.	O

Does	O
anyone	O
know	O
if	O
there	O
is	O
a	O
way	O
to	O
clear	O
or	O
disable	O
the	O
Messenger	O
when	O
the	O
"	O
Operation	O
"	O
is	O
over	O
so	O
it	O
doesn't	O
create	O
this	O
memory	O
leak	O
?	O

Is	O
there	O
perhaps	O
another	O
way	O
to	O
implement	O
the	O
IPC	O
to	O
the	O
Service	O
in	O
the	O
same	O
fashion	O
,	O
so	O
that	O
multiple	O
disparate	O
objects	O
can	O
make	O
a	O
request	O
and	O
get	O
a	O
result	O
asynchronously	O
?	O

Thanks	O
in	O
advance	O
!	O

I	O
am	O
not	O
sure	O
if	O
this	O
is	O
the	O
best	O
way	O
since	O
,	O
even	O
if	O
Activity	O
is	O
in	O
the	O
background	O
you	O
will	O
get	O
the	O
message	O
from	O
Service	O
.	O

I	O
think	O
you	O
should	O
bind	O
to	O
the	O
service	O
and	O
register	O
a	O
messenger	O
to	O
the	O
service	O
as	O
soon	O
as	O
Service	O
is	O
connected	O
.	O

And	O
then	O
unregister	O
the	O
messenger	O
when	O
you	O
disconnect	O
.	O

Check	O
ExportVcardActivity	B-API
in	O
AOSP	O
.	O

It	O
is	O
following	O
something	O
along	O
these	O
lines	O
.	O

Looks	O
like	O
you	O
starting	O
a	O
lot	O
of	O
services	O
instead	O
of	O
binding	O
to	O
currently	O
running	O
.	O

It	O
is	O
difficult	O
to	O
judge	O
from	O
your	O
quotes	O
,	O
but	O
I	O
can	O
suppose	O
it	O
from	O
context.startService	B-API
(	O
serviceIntent	O
);	O
That	O
could	O
be	O
the	O
reason	O
of	O
memory	O
leak.IMHO	B-API
you	O
should	O
read	O
carefully	O
Bound	O
Services	O
to	O
check	O
you	O
code	O
.	O

Thanks	O
to	O
some	O
very	O
helpful	O
insight	O
from	O
Dianne	O
Hackborn	O
on	O
the	O
Android	B-Plat
team	O
,	O
the	O
issue	O
is	O
because	O
the	O
remote	O
service	O
process	O
has	O
not	O
yet	O
Garbage	O
Collected	O
it	O
'	O
s	O
instance	O
of	O
the	O
Messenger	O
which	O
,	O
in	O
effect	O
,	O
held	O
the	O
instances	O
in	O
the	O
application	O
'	O
s	O
process	O
hostage	O
until	O
that	O
time	O
.	O

This	O
is	O
the	O
text	O
of	O
her	O
reply	O
:	O

It	O
is	O
true	O
that	O
sending	O
a	O
messenger	O
across	O
processes	O
will	O
require	O
holding	O
a	O
GREF	O
on	O
it	O
for	O
the	O
other	O
process	O
to	O
communicate	O
with	O
it	O
.	O

Barring	O
bugs	O
(	O
which	O
have	O
happened	O
but	O
I	O
am	O
not	O
sure	O
if	O
in	O
any	O
released	O
platform	O
versions	O
)	O
,	O
the	O
GREF	O
will	O
be	O
released	O
when	O
the	O
other	O
process	O
itself	O
no	O
longer	O
holds	O
a	O
reference	O
on	O
this	O
.	O

When	O
we	O
are	O
talking	O
about	O
things	O
in	O
Dalvik	O
"	O
no	O
longer	O
holds	O
a	O
reference	O
"	O
generally	O
means	O
"	O
the	O
other	O
side	O
has	O
garbage	O
collected	O
the	O
Java	B-PL
proxy	O
object	O
.	O

"	O
What	O
this	O
means	O
is	O
that	O
when	O
you	O
throw	O
a	O
Messenger	O
(	O
or	O
any	O
IBinder	O
object	O
)	O
across	O
to	O
another	O
process	O
,	O
the	O
Dalvik	O
VM	O
in	O
your	O
own	O
process	O
can	O
no	O
longer	O
manage	O
the	O
memory	O
of	O
that	O
object	O
itself	O
and	O
is	O
dependent	O
on	O
all	O
remote	O
objects	O
releasing	O
it	O
until	O
it	O
can	O
be	O
released	O
locally	O
.	O

And	O
this	O
will	O
include	O
all	O
objects	O
that	O
the	O
IBinder	O
has	O
any	O
references	O
to	O
as	O
well	O
.	O

A	O
common	O
pattern	O
to	O
deal	O
with	O
this	O
is	O
to	O
use	O
a	O
WeakReference	B-API
in	O
your	O
IBinder	O
/	O
Messenger	O
that	O
holds	O
the	O
references	O
to	O
the	O
rest	B-Stan
of	O
your	O
objects	O
that	O
it	O
will	O
access	O
.	O

This	O
allows	O
your	O
local	O
garbage	O
collector	O
to	O
clean	O
up	O
all	O
of	O
those	O
other	O
objects	O
(	O
which	O
may	O
be	O
quite	O
heavy	O
,	O
holding	O
big	O
things	O
like	O
bitmaps	O
and	O
such	O
)	O
even	O
though	O
a	O
remote	O
process	O
still	O
has	O
a	O
reference	O
on	O
your	O
IBinder	O
.	O

Of	O
course	O
if	O
you	O
do	O
this	O
,	O
there	O
needs	O
to	O
be	O
something	O
else	O
holding	O
a	O
reference	O
on	O
these	O
other	O
objects	O
until	O
they	O
are	O
no	O
longer	O
needed	O
,	O
or	O
else	O
the	O
garbage	O
collector	O
could	O
clean	O
them	O
up	O
before	O
they	O
are	O
no	O
longer	O
needed	O
.	O

Something	O
else	O
I	O
would	O
recommend	O
is	O
to	O
not	O
do	O
a	O
design	O
where	O
you	O
instantiate	O
Messenger	O
objects	O
for	O
each	O
IPC	O
you	O
do	O
.	O

Create	O
one	O
Messenger	O
that	O
you	O
pass	O
in	O
to	O
each	O
IPC	O
call	O
.	O

Otherwise	O
you	O
can	O
generate	O
a	O
lot	O
of	O
remoted	O
objects	O
that	O
are	O
being	O
kept	O
around	O
due	O
to	O
other	O
processes	O
continuing	O
to	O
hold	O
references	O
because	O
the	O
other	O
side	O
is	O
not	O
aggressively	O
garbage	O
collecting	O
since	O
all	O
the	O
objects	O
it	O
is	O
creating	O
due	O
to	O
these	O
calls	O
are	O
small	O
.	O

More	O
Info	O
:	O
https://groups.google.com/d/msg/android-developers/aK2o1W2xrMU/Z0-QujnU3wUJ	O
