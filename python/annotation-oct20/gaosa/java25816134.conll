How	O
to	O
"	O
append	O
"	O
new	O
field	O
/	O
data	O
into	O
an	O
object	O
without	O
creating	O
a	O
new	O
class	O
nor	O
modifying	O
the	O
class	O
?	O

I	O
have	O
a	O
method	O
which	O
calculates	O
an	O
integer	O
for	O
every	O
row	O
in	O
a	O
bean	O
MyPeriod	B-API
.	O

I	O
don't	O
want	O
to	O
change	O
the	O
class	O
MyPeriod	B-API
,	O
to	O
create	O
a	O
new	O
class	O
or	O
to	O
have	O
two	O
lists	O
but	O
I	O
need	O
to	O
return	O
some	O
list	O
which	O
contains	O
the	O
list	O
of	O
MyPeriod	B-API
with	O
a	O
new	O
column	O
.	O

What	O
is	O
the	O
ways	O
to	O
deal	O
with	O
this	O
issue	O
?	O

@codeSnippetRemoved	O

You	O
have	O
listed	O
the	O
good	O
alternatives	O
-	O
creating	O
a	O
new	O
class	O
and	O
changing	O
MyPeriod	B-API
.	O

If	O
you	O
want	O
a	O
bad	O
one	O
,	O
you	O
could	O
return	O
an	O
array	O
,	O
and	O
let	O
your	O
callers	O
assume	O
that	O
it	O
has	O
two	O
items	O
:	O
@codeSnippetRemoved	O

If	O
you	O
know	O
that	O
all	O
periods	O
in	O
List	O
MyPeriod	B-API
are	O
different	O
,	O
and	O
also	O
that	O
MyPeriod	B-API
implements	O
robust	O
hashCode()	B-API
and	O
equals()	B-API
,	O
you	O
could	O
use	O
LinkedHashMap	B-API
MyPeriod	B-API
,	O
Integer	O
to	O
establish	O
your	O
mappings	O
:	O
@codeSnippetRemoved	O

If	O
you	O
are	O
using	O
JDK7	O
or	O
later	O
,	O
you	O
can	O
use	O
javafx.util.Pair	B-API
:	O
@codeSnippetRemoved	O

public	O
Map	O
MyPeriod	B-API
,	O
Integer	O
bindNewColumn	O
(	O
List	O
MyPeriod	B-API
periods	O
)	O
{	O
Map	O
MyPeriod	B-API
,	O
Integer	O
map	O
=	O
new	O
HashMap	B-API
MyPeriod	B-API
,	O
Integer	O
(	O
);	O
for	O
(	O
MyPeriod	B-API
period	O
:	O
periods	O
)	O
{	O
map.put	B-API
(	O
period	O
,	O
calculation	O
(	O
period	O
));	O
}	O
return	O
map	O
;	O
}	O

With	O
a	O
Pair	O
.	O

@codeSnippetRemoved	O
