How	O
can	O
I	O
simplify	O
C#	B-PL
code	O
that	O
sets	O
multiple	O
properties	O
of	O
an	O
object	O
?	O

I	O
have	O
code	O
that	O
looks	O
like	O
this	O
:	O
@codeSnippetRemoved	O

plus	O
many	O
more	O
lines	O
where	O
I	O
set	O
values	O
for	O
the	O
Question	O
class	O
that	O
is	O
inside	O
the	O
itemView	O
.	O

I	O
think	O
the	O
answer	O
is	O
"	O
not	O
possible	O
"	O
but	O
just	O
putting	O
it	O
out	O
as	O
a	O
question	O
in	O
case	O
anyone	O
knows	O
a	O
way	O
.	O

What	O
I	O
would	O
like	O
to	O
do	O
is	O
to	O
find	O
a	O
way	O
to	O
simplify	O
this	O
code	O
without	O
repeating	O
itemView.Question	B-API
in	O
every	O
line	O
.	O

Do	O
you	O
instantiate	O
itemView.Question	B-API
as	O
part	O
of	O
your	O
method	O
?	O

If	O
so	O
you	O
could	O
do	O
:	O
-	O
@codeSnippetRemoved	O

If	O
that	O
Question	O
is	O
a	O
class	O
,	O
then	O
you	O
could	O
shorten	O
the	O
code	O
a	O
bit	O
:	O
@codeSnippetRemoved	O

If	O
Question	O
is	O
a	O
class	O
(	O
not	O
a	O
struct	O
)	O
,	O
then	O
you	O
could	O
assign	O
it	O
to	O
a	O
local	O
variable	O
,	O
and	O
edit	O
that	O
:	O
@codeSnippetRemoved	O

You	O
won't	O
even	O
have	O
to	O
assign	O
q	O
back	O
to	O
itemView.Question	B-API
.	O

This	O
is	O
because	O
classes	O
in	O
C#	B-PL
are	O
reference	O
types	O
.	O

If	O
you	O
assign	O
an	O
instance	O
of	O
a	O
reference	O
type	O
to	O
a	O
local	O
variable	O
,	O
or	O
pass	O
it	O
to	O
a	O
function	O
,	O
then	O
changes	O
to	O
that	O
instance	O
will	O
be	O
reflected	O
everywhere	O
you	O
have	O
a	O
reference	O
to	O
that	O
same	O
instance	O
.	O

Edit	O

Note	O
that	O
the	O
situation	O
might	O
be	O
a	O
bit	O
murky	O
if	O
Question	O
is	O
a	O
property	O
of	O
itemView	O
,	O
rather	O
than	O
a	O
field	O
.	O

Depending	O
on	O
how	O
it	O
is	O
implemented	O
,	O
you	O
might	O
have	O
to	O
assign	O
q	O
back	O
to	O
Question	O
.	O

In	O
such	O
a	O
case	O
,	O
this	O
code	O
is	O
still	O
much	O
preferred	O
to	O
avoid	O
calling	O
the	O
Question	O
property	O
'	O
s	O
getter	O
method	O
repeatedly	O
.	O

Depending	O
on	O
how	O
much	O
control	O
you	O
have	O
over	O
the	O
Question	O
class	O
,	O
separating	O
the	O
resposibility	O
for	O
setting	O
that	O
meta-data	O
may	O
be	O
an	O
idea	O
:	O
@codeSnippetRemoved	O

One	O
option	O
is	O
that	O
you	O
can	O
convert	O
your	O
properties	O
into	O
methods	O
that	O
return	O
'	O
this	O
'	O
.	O

Then	O
you	O
could	O
write	O
:	O
@codeSnippetRemoved	O

I've	O
heard	O
this	O
style	O
called	O
'	O
fluent	O
interface	O
'	O
,	O
and	O
find	O
it	O
pretty	O
handy	O
.	O

I	O
sometimes	O
create	O
properties	O
and	O
a	O
matching	O
set	O
methods	O
returning	O
'	O
this	O
'	O
called	O
SetXXXX	O
to	O
compliment	O
them	O
.	O

The	O
popular	O
Rhino	O
Mocks	O
framework	O
for	O
unit	O
testing	O
uses	O
it	O
.	O

More	O
examples	O
here	O
:	O
http://www.codeproject.com/Articles/99542/Guidelines-to-Fluent-Interface-design-in-C-Part-1	O
