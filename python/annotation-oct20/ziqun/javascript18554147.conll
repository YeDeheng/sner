How	O
to	O
use	O
relative	O
paths	O
in	O
require.config	B-API
?	O

I'd	O
like	O
to	O
distribute	O
a	O
piece	O
of	O
code	O
as	O
an	O
AMD	O
module	O
.	O

The	O
module	O
depends	O
on	O
jQuery	B-Fram
in	O
a	O
noConflict	O
mode	O
with	O
two	O
jQuery	B-Fram
plugins	O
.	O

I'd	O
like	O
the	O
user	O
to	O
be	O
able	O
to	O
use	O
the	O
module	O
by	O
simply	O
requiring	O
a	O
single	O
module	O
file	O
(	O
module	O
will	O
be	O
hosted	O
on	O
our	O
servers	O
)	O
,	O
and	O
let	O
the	O
dependencies	O
be	O
handled	O
for	O
them	O
.	O

However	O
,	O
for	O
the	O
dependencies	O
to	O
be	O
loaded	O
properly	O
,	O
I	O
have	O
to	O
invoke	O
require.config()	B-API
and	O
it	O
seems	O
to	O
have	O
the	O
module	O
paths	O
relative	O
to	O
the	O
web	O
page	O
,	O
not	O
to	O
the	O
invoking	O
script	O
.	O

I	O
could	O
use	O
the	O
paths	O
configuration	O
to	O
make	O
all	O
the	O
paths	O
absolute	O
.	O

That	O
would	O
solve	O
the	O
dependency	O
problem	O
,	O
but	O
would	O
also	O
make	O
testing	O
anywhere	O
outside	O
our	O
production	O
server	O
a	O
nightmare	O
.	O

To	O
be	O
more	O
specific	O
,	O
the	O
module	O
file	O
looks	O
roughly	O
like	O
this	O
:	O
@codeSnippetRemoved	O

And	O
the	O
jquery-wrapper.js	O
file	O
in	O
the	O
same	O
directory	O
looks	O
like	O
this	O
:	O
@codeSnippetRemoved	O

Is	O
there	O
any	O
way	O
I	O
can	O
use	O
paths	O
relative	O
to	O
the	O
module	O
everywhere	O
?	O

I	O
think	O
you	O
can	O
use	O
separate	O
configs	O
to	O
get	O
this	O
to	O
work	O
:	O

file	O
structure	O

The	O
other	O
/	O
module	O
path	O
simulates	O
the	O
other	O
server	O
in	O
this	O
example	O
.	O

@codeSnippetRemoved	O

other	O
/	O
module	O
/	O
main.js	B-API

Has	O
a	O
dependency	O
,	O
using	O
a	O
relative	O
module	O
name	O
.	O

@codeSnippetRemoved	O

a.js	B-API

Has	O
a	O
dependency	O
,	O
using	O
a	O
relative	O
module	O
name	O
.	O

@codeSnippetRemoved	O

b.js	B-API
and	O
c.js	B-API

Uninteresting	O
.	O

@codeSnippetRemoved	O

other	O
/	O
module	O
/	O
module-file-1.js	O

Uninteresting	O
.	O

@codeSnippetRemoved	O

test.html	B-API

Set	O
up	O
two	O
require	O
contexts	O
,	O
use	O
each	O
to	O
load	O
their	O
own	O
modules	O
,	O
and	O
then	O
wait	O
for	O
both	O
sets	O
of	O
modules	O
to	O
load	O
:	O
@codeSnippetRemoved	O

Console	O
@codeSnippetRemoved	O
